{
    "language": "Solidity",
    "sources": {
        "./contracts/ReaperStrategyTarot.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\nimport \"./abstract/ReaperBaseStrategyv4.sol\";\nimport \"./interfaces/IRouter.sol\";\nimport \"./interfaces/IFactory.sol\";\nimport \"./interfaces/IPoolToken.sol\";\nimport \"./interfaces/ICollateral.sol\";\nimport \"./interfaces/IBorrowable.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"./library/UniswapV3Utils.sol\";\n\npragma solidity 0.8.11;\npragma experimental ABIEncoderV2;\n\n/**\n * @dev This strategy will deposit and leverage a token on Geist to maximize yield\n */\ncontract ReaperStrategyTarot is ReaperBaseStrategyv4 {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    struct PoolAllocation {\n        address poolAddress;\n        uint256 allocation;\n    }\n\n    struct RouterPool {\n        RouterType routerType;\n        uint256 index;\n    }\n\n    enum RouterType {\n        ZIPSWAP,\n        VELODROME\n    }\n\n    // 3rd-party contract addresses\n    address public constant UNI_ROUTER = address(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n    address public constant TAROT_ROUTER_ZIPSWAP = address(0xD4a6a05081fD270dC111332845A778a49FE01741);\n    address public constant TAROT_ROUTER_VELODROME = address(0xa516b9c7378799799e6DfadBdABF45d5b584405f);\n\n    /**\n     * @dev Tokens Used:\n     * {USDC} - Token for charging fees\n     */\n    address public constant USDC = address(0x7F5c764cBc14f9669B88837ca1490cCa17c31607);\n\n    /**\n     * @dev UniV3 routes:\n     * {wantToUsdcRoute} - Route for charging fees from profit\n     */\n    bytes public wantToUsdcRoute;\n\n    /**\n     * @dev Tarot variables\n     * {usedPools} - A set of pool addresses which are the authorized lending pools that can be used\n     * {maxPools} - Sets the maximum amount of pools that can be added\n     * {depositPool} - Address of the pool that regular deposits will go to\n     * {sharePriceSnapshot} - Saves the pricePerFullShare to be compared between harvests to calculate profit\n     * {minProfitToChargeFees} - The minimum amount of profit for harvest to charge fees\n     * {minWantToDepositOrWithdraw} - A minimum amount to deposit or withdraw from a pool (to save gas on very small amounts)\n     * {maxWantRemainingToRemovePool} - Sets the allowed amount for a pool to have and still be removable (which will loose those funds)\n     * {MAX_SLIPPAGE_TOLERANCE} - Sets a cap on the withdraw slippage tolerance \n     */\n    EnumerableSetUpgradeable.AddressSet private usedPools;\n    uint256 public maxPools;\n    address public depositPool;\n    uint256 public sharePriceSnapshot;\n    uint256 public minProfitToChargeFees;\n    uint256 public minWantToDepositOrWithdraw;\n    uint256 public maxWantRemainingToRemovePool;\n    bool public shouldHarvestOnDeposit;\n    bool public shouldHarvestOnWithdraw;\n    uint256 public constant MAX_SLIPPAGE_TOLERANCE = 100;\n    uint256 public minWantToSell;\n\n    /**\n     * @dev Initializes the strategy. Sets parameters, saves routes, and gives allowances.\n     * @notice see documentation for each variable above its respective declaration.\n     */\n    function initialize(\n        address _vault,\n        address[] memory _feeRemitters,\n        address[] memory _strategists,\n        address[] memory _multisigRoles,\n        address[] memory _wantToUsdcRoute,\n        uint24[] memory _wantToDaiFee,\n        uint256 _initialPoolIndex,\n        RouterType _routerType\n    ) public initializer {\n        __ReaperBaseStrategy_init(_vault, _wantToUsdcRoute[0], _feeRemitters, _strategists, _multisigRoles);\n        sharePriceSnapshot = IVault(_vault).getPricePerFullShare();\n        maxPools = 40;\n        minProfitToChargeFees = 1e9;\n        minWantToDepositOrWithdraw = 10;\n        maxWantRemainingToRemovePool = 100;\n        minWantToSell = 12 * 1e8;\n        addUsedPool(_initialPoolIndex, _routerType);\n        depositPool = usedPools.at(0); // Guarantees depositPool is always a Tarot pool\n        shouldHarvestOnDeposit = true;\n        shouldHarvestOnWithdraw = true;\n        wantToUsdcRoute = UniswapV3Utils.routeToPath(_wantToUsdcRoute, _wantToDaiFee);\n    }\n\n    function _adjustPosition(uint256 _debt) internal override {\n        if (emergencyExit) {\n            return;\n        }\n\n        uint256 wantBalance = balanceOfWant();\n        if (wantBalance > _debt) {\n            uint256 toReinvest = wantBalance - _debt;\n            _deposit(toReinvest);\n        }\n    }\n\n    function _liquidatePosition(uint256 _amountNeeded)\n        internal\n        override\n        returns (uint256 liquidatedAmount, uint256 loss)\n    {\n        uint256 wantBal = balanceOfWant();\n        if (wantBal < _amountNeeded) {\n            _withdraw(_amountNeeded - wantBal);\n            liquidatedAmount = balanceOfWant();\n        } else {\n            liquidatedAmount = _amountNeeded;\n        }\n\n        if (_amountNeeded > liquidatedAmount) {\n            loss = _amountNeeded - liquidatedAmount;\n        }\n    }\n\n    function _liquidateAllPositions() internal override returns (uint256 amountFreed) {\n        _reclaimWant();\n        return balanceOfWant();\n    }\n\n    /**\n     * @dev Function that puts the funds to work.\n     *      It gets called whenever someone deposits in the strategy's vault contract.\n     */\n    function _deposit(uint256 _amount) internal {\n        if (_amount != 0) {\n            IERC20Upgradeable(want).safeTransfer(depositPool, _amount);\n            IBorrowable(depositPool).mint(address(this));\n        }\n    }\n\n    /**\n     * @dev Withdraws a given amount by looping through all lending pools until enough want has been withdrawn\n     */\n    function _withdraw(uint256 _amountToWithdraw) internal returns (uint256) {\n        uint256 remainingUnderlyingNeeded = _amountToWithdraw;\n        uint256 withdrawn = 0;\n\n        uint256 nrOfPools = usedPools.length();\n        for (uint256 index = 0; index < nrOfPools; index++) {\n            address currentPool = usedPools.at(index);\n            uint256 suppliedToPool = wantSuppliedToPool(currentPool);\n            if (suppliedToPool < minWantToDepositOrWithdraw) {\n                continue;\n            }\n            uint256 exchangeRate = IBorrowable(currentPool).exchangeRate();\n            uint256 poolAvailableWant = IERC20Upgradeable(want).balanceOf(currentPool);\n            uint256 ableToPullInUnderlying = MathUpgradeable.min(suppliedToPool, poolAvailableWant);\n            uint256 underlyingToWithdraw = MathUpgradeable.min(remainingUnderlyingNeeded, ableToPullInUnderlying);\n\n            if (underlyingToWithdraw < minWantToDepositOrWithdraw) {\n                continue;\n            }\n\n            uint256 bTokenToWithdraw = (underlyingToWithdraw * 1 ether) / exchangeRate;\n\n            IBorrowable(currentPool).transfer(currentPool, bTokenToWithdraw);\n            withdrawn += IBorrowable(currentPool).redeem(address(this));\n\n            if (withdrawn >= _amountToWithdraw - minWantToDepositOrWithdraw) {\n                break;\n            }\n\n            remainingUnderlyingNeeded = _amountToWithdraw - withdrawn;\n        }\n        return withdrawn;\n    }\n\n    /**\n     * @dev Takes a list of pool allocations and deposits into the lending pools accordingly\n     */\n    function rebalance(PoolAllocation[] calldata _allocations) external {\n        _atLeastRole(KEEPER);\n        _reclaimWant(); // Withdraw old deposits to deposit the new allocation\n        uint256 nrOfAllocations = _allocations.length;\n        for (uint256 index = 0; index < nrOfAllocations; index++) {\n            address pool = _allocations[index].poolAddress;\n            require(usedPools.contains(pool), \"Pool is not authorized\");\n\n            // Save the top APR pool to deposit in to\n            if (index == 0) {\n                depositPool = pool;\n            }\n\n            uint256 wantAvailable = IERC20Upgradeable(want).balanceOf(address(this));\n            if (wantAvailable == 0) {\n                return;\n            }\n            uint256 allocation = _allocations[index].allocation;\n            uint256 depositAmount = MathUpgradeable.min(wantAvailable, allocation);\n            IERC20Upgradeable(want).safeTransfer(pool, depositAmount);\n            IBorrowable(pool).mint(address(this));\n        }\n        uint256 wantBalance = balanceOfWant();\n        if (wantBalance > minWantToDepositOrWithdraw) {\n            IERC20Upgradeable(want).safeTransfer(depositPool, wantBalance);\n            IBorrowable(depositPool).mint(address(this));\n        }\n    }\n\n    /**\n     * @dev Core function of the strat, in charge of collecting and re-investing rewards.\n     * @notice Assumes the deposit will take care of the TVL rebalancing.\n     * 1. Claims {SCREAM} from the comptroller.\n     * 2. Swaps {SCREAM} to {WFTM}.\n     * 3. Claims fees for the harvest caller and treasury.\n     * 4. Swaps the {WFTM} token for {want}\n     * 5. Deposits.\n     */\n    function _harvestCore(uint256 _debt)\n        internal\n        override\n        returns (\n            uint256 callerFee,\n            int256 roi,\n            uint256 repayment\n        )\n    {\n        callerFee = _chargeFees();\n        \n        uint256 allocated = IVault(vault).strategies(address(this)).allocated;\n        uint256 totalAssets = balanceOf();\n        uint256 toFree = _debt;\n\n        if (totalAssets > allocated) {\n            uint256 profit = totalAssets - allocated;\n            toFree += profit;\n            roi = int256(profit);\n        } else if (totalAssets < allocated) {\n            roi = -int256(allocated - totalAssets);\n        }\n\n        (uint256 amountFreed, uint256 loss) = _liquidatePosition(toFree);\n        repayment = MathUpgradeable.min(_debt, amountFreed);\n        roi -= int256(loss);\n    }\n\n    /**\n     * @dev Core harvest function.\n     *      Charges fees based on the amount of WFTM gained from reward\n     */\n    function _chargeFees() internal returns (uint256 callerFee) {\n        updateExchangeRates();\n        uint256 profit = profitSinceHarvest();\n        if (profit >= minProfitToChargeFees) {\n            uint256 fee = (profit * totalFee) / PERCENT_DIVISOR;\n\n            if (fee != 0) {\n                uint256 wantBal = IERC20Upgradeable(want).balanceOf(address(this));\n                if (wantBal < fee) {\n                    uint256 withdrawn = _withdraw(fee - wantBal);\n                    if (withdrawn + wantBal < fee) {\n                        fee = withdrawn + wantBal;\n                    }\n                }\n                _swapToUsdc(fee);\n                IERC20Upgradeable usdc = IERC20Upgradeable(USDC);\n                uint256 usdcBalance = usdc.balanceOf(address(this));\n                callerFee = (usdcBalance * callFee) / PERCENT_DIVISOR;\n                uint256 treasuryFeeToVault = (usdcBalance * treasuryFee) / PERCENT_DIVISOR;\n                uint256 feeToStrategist = (treasuryFeeToVault * strategistFee) / PERCENT_DIVISOR;\n                treasuryFeeToVault -= feeToStrategist;\n\n                \n                usdc.safeTransfer(msg.sender, callerFee);\n                usdc.safeTransfer(treasury, treasuryFeeToVault);\n                usdc.safeTransfer(strategistRemitter, feeToStrategist);\n                sharePriceSnapshot = IVault(vault).getPricePerFullShare();\n            }\n        }\n    }\n\n    /**\n     * @dev Helper function to swap want to USDC\n     */\n    function _swapToUsdc(\n        uint256 _amount\n    ) internal {\n        if (_amount >= minWantToSell) {\n            IERC20Upgradeable(want).safeIncreaseAllowance(UNI_ROUTER, _amount);\n            UniswapV3Utils.swap(UNI_ROUTER, wantToUsdcRoute, _amount);\n        }\n    }\n\n    /**\n     * @dev Updates the borrowable exchangerate to update the interest earned\n     */\n    function updateExchangeRates() public {\n        uint256 nrOfPools = usedPools.length();\n        for (uint256 index = 0; index < nrOfPools; index++) {\n            address pool = usedPools.at(index);\n            uint256 bTokenBalance = IBorrowable(pool).balanceOf(address(this));\n            // Checking the borrowable balance here for gas efficiency, even though it is not strictly correct\n            if (bTokenBalance >= minWantToDepositOrWithdraw) {\n                // Only update where some want is deposited\n                IBorrowable(pool).exchangeRate();\n            }\n        }\n    }\n\n    /**\n     * @dev Function to calculate the total {want} held by the strat.\n     *      It takes into account both the funds in hand, plus the funds in the lending pools.\n     */\n    function balanceOf() public view override returns (uint256) {\n        return balanceOfWant() + balanceOfPools();\n    }\n\n    /**\n     * @dev Returns the amount of want available in the strategy\n     */\n    function balanceOfWant() public view returns (uint256) {\n        return IERC20Upgradeable(want).balanceOf(address(this));\n    }\n\n    /**\n     * @dev Returns the amount of want supplied to all lending pools\n     */\n    function balanceOfPools() public view returns (uint256 poolBalance) {\n        uint256 nrOfPools = usedPools.length();\n        for (uint256 index = 0; index < nrOfPools; index++) {\n            poolBalance += wantSuppliedToPool(usedPools.at(index));\n        }\n    }\n\n    /**\n     * @dev Returns the address for all the currently used pools\n     */\n    function getUsedPools() external view returns (address[] memory) {\n        uint256 nrOfPools = usedPools.length();\n        address[] memory pools = new address[](nrOfPools);\n\n        for (uint256 index = 0; index < nrOfPools; index++) {\n            address poolAddress = usedPools.at(index);\n            pools[index] = poolAddress;\n        }\n        return pools;\n    }\n\n    /**\n     * @dev Returns the balance supplied to each pool\n     */\n    function getSuppliedToPools() external view returns (uint256[] memory) {\n        uint256 nrOfPools = usedPools.length();\n        uint256[] memory supplied = new uint256[](nrOfPools);\n\n        for (uint256 index = 0; index < nrOfPools; index++) {\n            address poolAddress = usedPools.at(index);\n            uint256 suppliedToPool = wantSuppliedToPool(poolAddress);\n            supplied[index] = suppliedToPool;\n        }\n        return supplied;\n    }\n\n    /**\n     * @dev Returns the total withdrawable balance from all pools\n     */\n    function getAvailableBalance() external view returns (uint256 availableBalance) {\n        uint256 nrOfPools = usedPools.length();\n        for (uint256 index = 0; index < nrOfPools; index++) {\n            address poolAddress = usedPools.at(index);\n            uint256 suppliedToPool = wantSuppliedToPool(poolAddress);\n            uint256 poolAvailableWant = IERC20Upgradeable(want).balanceOf(poolAddress);\n\n            availableBalance += MathUpgradeable.min(suppliedToPool, poolAvailableWant);\n        }\n    }\n\n    /**\n     * @dev Returns the amount of want supplied to each specific pool\n     */\n    function getPoolBalances() external view returns (PoolAllocation[] memory) {\n        uint256 nrOfPools = usedPools.length();\n        PoolAllocation[] memory poolBalances = new PoolAllocation[](nrOfPools);\n\n        for (uint256 index = 0; index < nrOfPools; index++) {\n            address poolAddress = usedPools.at(index);\n            uint256 wantInPool = wantSuppliedToPool(poolAddress);\n            PoolAllocation memory poolBalance = PoolAllocation(poolAddress, wantInPool);\n            poolBalances[index] = (poolBalance);\n        }\n        return poolBalances;\n    }\n\n    /**\n     * @dev Returns the amount of want supplied to a lending pool.\n     */\n    function wantSuppliedToPool(address _pool) public view returns (uint256 wantBal) {\n        uint256 bTokenBalance = IBorrowable(_pool).balanceOf(address(this));\n        uint256 currentExchangeRate = IBorrowable(_pool).exchangeRateLast();\n        wantBal = (bTokenBalance * currentExchangeRate) / 1 ether;\n    }\n\n    /**\n     * @dev Returns the approx amount of profit in want since latest harvest\n     */\n    function profitSinceHarvest() public view returns (uint256 profit) {\n        uint256 ppfs = IVault(vault).getPricePerFullShare();\n        if (ppfs <= sharePriceSnapshot) {\n            return 0;\n        }\n        uint256 sharePriceChange = ppfs - sharePriceSnapshot;\n        profit = (balanceOf() * sharePriceChange) / 1 ether;\n    }\n\n    /**\n     * Withdraws all funds\n     */\n    function _reclaimWant() internal {\n        _withdraw(type(uint256).max);\n    }\n\n    /**\n     * Withdraws all funds\n     */\n    function reclaimWant() public {\n        _atLeastRole(KEEPER);\n        _reclaimWant();\n    }\n\n    /**\n     * @dev Adds multiple pools at once\n     */\n    function addUsedPools(RouterPool[] calldata _poolsToAdd) external {\n        _atLeastRole(KEEPER);\n        uint256 nrOfPools = _poolsToAdd.length;\n        for (uint256 index = 0; index < nrOfPools; index++) {\n            RouterPool memory pool = _poolsToAdd[index];\n            addUsedPool(pool.index, pool.routerType);\n        }\n    }\n\n    /**\n     * @dev Adds a new pool using the Tarot factory index (to ensure only Tarot pools can be added)\n     */\n    function addUsedPool(uint256 _poolIndex, RouterType _routerType) public {\n        _atLeastRole(KEEPER);\n\n        address router;\n\n        if (_routerType == RouterType.ZIPSWAP) {\n            router = TAROT_ROUTER_ZIPSWAP;\n        } else if (_routerType == RouterType.VELODROME) {\n            router = TAROT_ROUTER_VELODROME;\n        }\n\n        address factory = IRouter(router).factory();\n        address lpAddress = IFactory(factory).allLendingPools(_poolIndex);\n        address lp0 = IUniswapV2Pair(lpAddress).token0();\n        address lp1 = IUniswapV2Pair(lpAddress).token1();\n        bool containsWant = lp0 == want || lp1 == want;\n        require(containsWant, \"Pool does not contain want\");\n        require(usedPools.length() < maxPools, \"Reached max nr of pools\");\n        (, , , address borrowable0, address borrowable1) = IFactory(factory).getLendingPool(lpAddress);\n        address poolAddress = lp0 == want ? borrowable0 : borrowable1;\n        require(usedPools.add(poolAddress), \"Pool already added\");\n    }\n\n    /**\n     * @dev Attempts to remove all want supplied to a pool, returns the amount left\n     */\n    function withdrawFromPool(address _pool) external returns (uint256) {\n        _atLeastRole(KEEPER);\n        require(usedPools.contains(_pool), \"Pool not used\");\n        uint256 currentExchangeRate = IBorrowable(_pool).exchangeRate();\n        uint256 wantSupplied = wantSuppliedToPool(_pool);\n        if (wantSupplied != 0) {\n            uint256 wantAvailable = IERC20Upgradeable(want).balanceOf(_pool);\n\n            uint256 ableToPullInUnderlying = MathUpgradeable.min(wantSupplied, wantAvailable);\n            uint256 ableToPullInbToken = (ableToPullInUnderlying * 1 ether) / currentExchangeRate;\n            if (ableToPullInbToken != 0) {\n                IBorrowable(_pool).transfer(_pool, ableToPullInbToken);\n                IBorrowable(_pool).redeem(address(this));\n            }\n            wantSupplied = wantSuppliedToPool(_pool);\n        }\n        return wantSupplied;\n    }\n\n    /**\n     * @dev Removes a list of pools.\n     */\n    function removeUsedPools(address[] calldata _poolsToRemove) external {\n        _atLeastRole(KEEPER);\n        uint256 nrOfPools = _poolsToRemove.length;\n        for (uint256 index = 0; index < nrOfPools; index++) {\n            removeUsedPool(_poolsToRemove[index]);\n        }\n    }\n\n    /**\n     * @dev Removes a pool that will no longer be used.\n     */\n    function removeUsedPool(address _pool) public {\n        _atLeastRole(KEEPER);\n        require(usedPools.length() > 1, \"Must have at least 1 pool\");\n        require(wantSuppliedToPool(_pool) < maxWantRemainingToRemovePool, \"Want is still supplied\");\n        require(usedPools.remove(_pool), \"Pool not used\");\n        if (_pool == depositPool) {\n            depositPool = usedPools.at(0);\n        }\n    }\n\n    /**\n     * @dev Sets the minimum amount of profit (in want) to charge fees\n     */\n    function setMinProfitToChargeFees(uint256 _minProfitToChargeFees) external {\n        _atLeastRole(STRATEGIST);\n        minProfitToChargeFees = _minProfitToChargeFees;\n    }\n\n    /**\n     * @dev Sets the minimum amount of want to deposit or withdraw out of a pool\n     */\n    function setMinWantToDepositOrWithdraw(uint256 _minWantToDepositOrWithdraw) external {\n        _atLeastRole(STRATEGIST);\n        minWantToDepositOrWithdraw = _minWantToDepositOrWithdraw;\n    }\n\n    /**\n     * @dev Sets the maximum amount of want remaining in a pool to still be able to remove it\n     */\n    function setMaxWantRemainingToRemovePool(uint256 _maxWantRemainingToRemovePool) external {\n        _atLeastRole(STRATEGIST);\n        require(_maxWantRemainingToRemovePool <= 10e6, \"Above max cap\");\n        maxWantRemainingToRemovePool = _maxWantRemainingToRemovePool;\n    }\n    \n    /**\n     * @dev Sets the maximum amount of pools that can be used at any time\n     */\n    function setMaxPools(uint256 _maxPools) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(_maxPools != 0 && _maxPools <= 100, \"Invalid nr of pools\");\n        maxPools = _maxPools;\n    }\n\n    /**\n     * @dev Sets if harvests should be done when depositing\n     */\n    function setShouldHarvestOnDeposit(bool _shouldHarvestOnDeposit) external {\n        _atLeastRole(STRATEGIST);\n        shouldHarvestOnDeposit = _shouldHarvestOnDeposit;\n    }\n\n    /**\n     * @dev Sets if harvests should be done when withdrawing\n     */\n    function setShouldHarvestOnWithdraw(bool _shouldHarvestOnWithdraw) external {\n        _atLeastRole(STRATEGIST);\n        shouldHarvestOnWithdraw = _shouldHarvestOnWithdraw;\n    }\n\n    /**\n     * @dev Sets the minimum want that will be sold (too little causes revert from Uniswap)\n     */\n    function setMinWantToSell(uint256 _minWantToSell) external {\n        _atLeastRole(STRATEGIST);\n        minWantToSell = _minWantToSell;\n    }\n}"
        },
        "./contracts/abstract/ReaperBaseStrategyv4.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IStrategy.sol\";\nimport \"../interfaces/IVault.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nabstract contract ReaperBaseStrategyv4 is IStrategy, UUPSUpgradeable, AccessControlEnumerableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint256 public constant PERCENT_DIVISOR = 10_000;\n    uint256 public constant ONE_YEAR = 365 days;\n    uint256 public constant UPGRADE_TIMELOCK = 48 hours; // minimum 48 hours for RF\n\n    // The token the strategy wants to operate\n    address public want;\n\n    // TODO tess3rac7\n    bool public emergencyExit;\n    uint256 public lastHarvestTimestamp;\n    uint256 public upgradeProposalTime;\n\n    /**\n     * Reaper Roles in increasing order of privilege.\n     * {KEEPER} - Stricly permissioned trustless access for off-chain programs or third party keepers.\n     * {STRATEGIST} - Role conferred to authors of the strategy, allows for tweaking non-critical params.\n     * {GUARDIAN} - Multisig requiring 2 signatures for emergency measures such as pausing and panicking.\n     * {ADMIN}- Multisig requiring 3 signatures for unpausing.\n     *\n     * The DEFAULT_ADMIN_ROLE (in-built access control role) will be granted to a multisig requiring 4\n     * signatures. This role would have upgrading capability, as well as the ability to grant any other\n     * roles.\n     *\n     * Also note that roles are cascading. So any higher privileged role should be able to perform all the functions\n     * of any lower privileged role.\n     */\n    bytes32 public constant KEEPER = keccak256(\"KEEPER\");\n    bytes32 public constant STRATEGIST = keccak256(\"STRATEGIST\");\n    bytes32 public constant GUARDIAN = keccak256(\"GUARDIAN\");\n    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\n    bytes32[] private cascadingAccess;\n\n    /**\n     * @dev Reaper contracts:\n     * {treasury} - Address of the Reaper treasury\n     * {vault} - Address of the vault that controls the strategy's funds.\n     * {strategistRemitter} - Address where strategist fee is remitted to.\n     */\n    address public treasury;\n    address public vault;\n    address public strategistRemitter;\n\n    /**\n     * Fee related constants:\n     * {MAX_FEE} - Maximum fee allowed by the strategy. Hard-capped at 10%.\n     * {STRATEGIST_MAX_FEE} - Maximum strategist fee allowed by the strategy (as % of treasury fee).\n     *                        Hard-capped at 50%\n     */\n    uint256 public constant MAX_FEE = 1000;\n    uint256 public constant STRATEGIST_MAX_FEE = 5000;\n\n    /**\n     * @dev Distribution of fees earned, expressed as % of the profit from each harvest.\n     * {totalFee} - divided by 10,000 to determine the % fee. Set to 4.5% by default and\n     * lowered as necessary to provide users with the most competitive APY.\n     *\n     * {callFee} - Percent of the totalFee reserved for the harvester (1000 = 10% of total fee: 0.45% by default)\n     * {treasuryFee} - Percent of the totalFee taken by maintainers of the software (9000 = 90% of total fee: 4.05% by default)\n     * {strategistFee} - Percent of the treasuryFee taken by strategist (2500 = 25% of treasury fee: 1.0125% by default)\n     */\n    uint256 public totalFee;\n    uint256 public callFee;\n    uint256 public treasuryFee;\n    uint256 public strategistFee;\n\n    /**\n     * {TotalFeeUpdated} Event that is fired each time the total fee is updated.\n     * {FeesUpdated} Event that is fired each time callFee+treasuryFee+strategistFee are updated.\n     * {StratHarvest} Event that is fired each time the strategy gets harvested.\n     * {StrategistRemitterUpdated} Event that is fired each time the strategistRemitter address is updated.\n     */\n    event TotalFeeUpdated(uint256 newFee);\n    event FeesUpdated(uint256 newCallFee, uint256 newTreasuryFee, uint256 newStrategistFee);\n    event StratHarvest(address indexed harvester);\n    event StrategistRemitterUpdated(address newStrategistRemitter);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function __ReaperBaseStrategy_init(\n        address _vault,\n        address _want,\n        address[] memory _feeRemitters,\n        address[] memory _strategists,\n        address[] memory _multisigRoles\n    ) internal onlyInitializing {\n        __UUPSUpgradeable_init();\n        __AccessControlEnumerable_init();\n\n        totalFee = 450;\n        callFee = 0;\n        treasuryFee = 10000;\n        strategistFee = 2500;\n\n        vault = _vault;\n        treasury = _feeRemitters[0];\n        strategistRemitter = _feeRemitters[1];\n\n        want = _want;\n        IERC20Upgradeable(want).safeApprove(vault, type(uint256).max);\n\n        for (uint256 i = 0; i < _strategists.length; i = _uncheckedInc(i)) {\n            _grantRole(STRATEGIST, _strategists[i]);\n        }\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(DEFAULT_ADMIN_ROLE, _multisigRoles[0]);\n        _grantRole(ADMIN, _multisigRoles[1]);\n        _grantRole(GUARDIAN, _multisigRoles[2]);\n\n        cascadingAccess = [DEFAULT_ADMIN_ROLE, ADMIN, GUARDIAN, STRATEGIST, KEEPER];\n        clearUpgradeCooldown();\n    }\n\n    /**\n     * @dev Withdraws funds and sends them back to the vault. Can only\n     *      be called by the vault. _amount must be valid and security fee\n     *      is deducted up-front.\n     */\n    function withdraw(uint256 _amount) external override returns (uint256 loss) {\n        require(msg.sender == vault);\n        require(_amount != 0);\n\n        uint256 amountFreed = 0;\n        (amountFreed, loss) = _liquidatePosition(_amount);\n        IERC20Upgradeable(want).safeTransfer(vault, amountFreed);\n    }\n\n    /**\n     * @dev harvest() function that takes care of logging. Subcontracts should\n     *      override _harvestCore() and implement their specific logic in it.\n     */\n    function harvest() external override returns (uint256 callerFee) {\n        _atLeastRole(KEEPER);\n        int256 availableCapital = IVault(vault).availableCapital();\n        uint256 debt = 0;\n        if (availableCapital < 0) {\n            debt = uint256(-availableCapital);\n        }\n\n        int256 roi = 0;\n        uint256 repayment = 0;\n        if (emergencyExit) {\n            uint256 amountFreed = _liquidateAllPositions();\n            if (amountFreed < debt) {\n                roi = -int256(debt - amountFreed);\n            } else if (amountFreed > debt) {\n                roi = int256(amountFreed - debt);\n            }\n\n            repayment = debt;\n            if (roi < 0) {\n                repayment -= uint256(-roi);\n            }\n        } else {\n            (callerFee, roi, repayment) = _harvestCore(debt);\n        }\n\n        debt = IVault(vault).report(roi, repayment);\n        _adjustPosition(debt);\n        lastHarvestTimestamp = block.timestamp;\n        emit StratHarvest(msg.sender);\n    }\n\n    /**\n     * @dev Function to calculate the total {want} held by the strat.\n     *      It takes into account both the funds in hand, plus the funds in external contracts.\n     */\n    function balanceOf() public view virtual override returns (uint256);\n\n    /**\n     * @notice\n     *  Activates emergency exit. Once activated, the Strategy will exit its\n     *  position upon the next harvest, depositing all funds into the Vault as\n     *  quickly as is reasonable given on-chain conditions.\n     *\n     *  This may only be called by governance or the strategist.\n     * @dev\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\n     */\n    function setEmergencyExit() external {\n        _atLeastRole(GUARDIAN);\n        emergencyExit = true;\n        IVault(vault).revokeStrategy(address(this));\n    }\n\n    /**\n     * @dev updates the total fee, capped at 5%; only DEFAULT_ADMIN_ROLE.\n     */\n    function updateTotalFee(uint256 _totalFee) external {\n        _atLeastRole(DEFAULT_ADMIN_ROLE);\n        require(_totalFee <= MAX_FEE);\n        totalFee = _totalFee;\n        emit TotalFeeUpdated(totalFee);\n    }\n\n    /**\n     * @dev updates the call fee, treasury fee, and strategist fee\n     *      call Fee + treasury Fee must add up to PERCENT_DIVISOR\n     *\n     *      strategist fee is expressed as % of the treasury fee and\n     *      must be no more than STRATEGIST_MAX_FEE\n     *\n     *      only DEFAULT_ADMIN_ROLE.\n     */\n    function updateFees(\n        uint256 _callFee,\n        uint256 _treasuryFee,\n        uint256 _strategistFee\n    ) external returns (bool) {\n        _atLeastRole(DEFAULT_ADMIN_ROLE);\n        require(_callFee + _treasuryFee == PERCENT_DIVISOR);\n        require(_strategistFee <= STRATEGIST_MAX_FEE);\n\n        callFee = _callFee;\n        treasuryFee = _treasuryFee;\n        strategistFee = _strategistFee;\n        emit FeesUpdated(callFee, treasuryFee, strategistFee);\n        return true;\n    }\n\n    /**\n     * @dev only DEFAULT_ADMIN_ROLE can update treasury address.\n     */\n    function updateTreasury(address newTreasury) external returns (bool) {\n        _atLeastRole(DEFAULT_ADMIN_ROLE);\n        treasury = newTreasury;\n        return true;\n    }\n\n    /**\n     * @dev Updates the current strategistRemitter. Only DEFAULT_ADMIN_ROLE may do this.\n     */\n    function updateStrategistRemitter(address _newStrategistRemitter) external {\n        _atLeastRole(DEFAULT_ADMIN_ROLE);\n        require(_newStrategistRemitter != address(0));\n        strategistRemitter = _newStrategistRemitter;\n        emit StrategistRemitterUpdated(_newStrategistRemitter);\n    }\n\n    /**\n     * @dev This function must be called prior to upgrading the implementation.\n     *      It's required to wait UPGRADE_TIMELOCK seconds before executing the upgrade.\n     *      Strategists and roles with higher privilege can initiate this cooldown.\n     */\n    function initiateUpgradeCooldown() external {\n        _atLeastRole(STRATEGIST);\n        upgradeProposalTime = block.timestamp;\n    }\n\n    /**\n     * @dev This function is called:\n     *      - in initialize()\n     *      - as part of a successful upgrade\n     *      - manually to clear the upgrade cooldown.\n     * Guardian and roles with higher privilege can clear this cooldown.\n     */\n    function clearUpgradeCooldown() public {\n        _atLeastRole(GUARDIAN);\n        upgradeProposalTime = block.timestamp + (ONE_YEAR * 100);\n    }\n\n    /**\n     * @dev This function must be overriden simply for access control purposes.\n     *      Only DEFAULT_ADMIN_ROLE can upgrade the implementation once the timelock\n     *      has passed.\n     */\n    function _authorizeUpgrade(address) internal override {\n        _atLeastRole(DEFAULT_ADMIN_ROLE);\n        require(upgradeProposalTime + UPGRADE_TIMELOCK < block.timestamp);\n        clearUpgradeCooldown();\n    }\n\n    /**\n     * @dev Internal function that checks cascading role privileges. Any higher privileged role\n     * should be able to perform all the functions of any lower privileged role. This is\n     * accomplished using the {cascadingAccess} array that lists all roles from most privileged\n     * to least privileged.\n     */\n    function _atLeastRole(bytes32 role) internal view {\n        uint256 numRoles = cascadingAccess.length;\n        uint256 specifiedRoleIndex;\n        for (uint256 i = 0; i < numRoles; i = _uncheckedInc(i)) {\n            if (role == cascadingAccess[i]) {\n                specifiedRoleIndex = i;\n                break;\n            } else if (i == numRoles - 1) {\n                revert();\n            }\n        }\n\n        for (uint256 i = 0; i <= specifiedRoleIndex; i = _uncheckedInc(i)) {\n            if (hasRole(cascadingAccess[i], msg.sender)) {\n                break;\n            } else if (i == specifiedRoleIndex) {\n                revert();\n            }\n        }\n    }\n\n    /**\n     * Perform any adjustments to the core position(s) of this Strategy given\n     * what change the Vault made in the \"investable capital\" available to the\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\n     * was made is available for reinvestment. Also note that this number\n     * could be 0, and you should handle that scenario accordingly.\n     */\n    function _adjustPosition(uint256 _debt) internal virtual;\n\n    /**\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\n     * irregardless of slippage. Any excess will be re-invested with `_adjustPosition()`.\n     * This function should return the amount of `want` tokens made available by the\n     * liquidation. If there is a difference between them, `loss` indicates whether the\n     * difference is due to a realized loss, or if there is some other sitution at play\n     * (e.g. locked funds) where the amount made available is less than what is needed.\n     *\n     * NOTE: The invariant `liquidatedAmount + loss <= _amountNeeded` should always be maintained\n     */\n    function _liquidatePosition(uint256 _amountNeeded)\n        internal\n        virtual\n        returns (uint256 liquidatedAmount, uint256 loss);\n\n    /**\n     * Liquidate everything and returns the amount that got freed.\n     * This function is used during emergency exit instead of `_harvestCore()` to\n     * liquidate all of the Strategy's positions back to the Vault.\n     */\n    function _liquidateAllPositions() internal virtual returns (uint256 amountFreed);\n\n    /**\n     * Perform any Strategy unwinding or other calls necessary to capture the\n     * \"free return\" this Strategy has generated since the last time its core\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\n     * This call is only used during \"normal operation\" of a Strategy, and\n     * should be optimized to minimize losses as much as possible.\n     *\n     * This method returns any realized profits and/or realized losses\n     * incurred, and should return the total amounts of profits/losses/debt\n     * payments (in `want` tokens) for the Vault's accounting.\n     *\n     * `_debt` will be 0 if the Strategy is not past the configured\n     * allocated capital, otherwise its value will be how far past the allocation\n     * the Strategy is. The Strategy's allocation is configured in the Vault.\n     *\n     * NOTE: `repayment` should be less than or equal to `_debt`.\n     *       It is okay for it to be less than `_debt`, as that\n     *       should only used as a guide for how much is left to pay back.\n     *       Payments should be made to minimize loss from slippage, debt,\n     *       withdrawal fees, etc.\n     * @dev subclasses should add their custom harvesting logic in this function\n     *      including charging any fees. The amount of fee that is remitted to the\n     *      caller must be returned.\n     */\n    function _harvestCore(uint256 _debt)\n        internal\n        virtual\n        returns (\n            uint256 callerFee,\n            int256 roi,\n            uint256 repayment\n        );\n\n    function _uncheckedInc(uint256 i) internal pure returns (uint256) {\n        unchecked {\n            return i + 1;\n        }\n    }\n}\n"
        },
        "./contracts/interfaces/IStrategy.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity ^0.8.0;\n\ninterface IStrategy {\n    //vault only - withdraws funds from the strategy\n    function withdraw(uint256 _amount) external returns (uint256 loss);\n\n    //claims rewards, charges fees, and re-deposits; returns caller fee amount.\n    function harvest() external returns (uint256 callerFee);\n\n    //returns the balance of all tokens managed by the strategy\n    function balanceOf() external view returns (uint256);\n\n    //returns the address of the vault that the strategy is serving\n    function vault() external view returns (address);\n\n    //returns the address of the token that the strategy needs to operate\n    function want() external view returns (address);\n}\n"
        },
        "./contracts/interfaces/IVault.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity ^0.8.0;\n\ninterface IVault {\n    struct StrategyParams {\n        uint256 activation; // Activation block.timestamp\n        uint256 allocBPS; // Allocation in BPS of vault's total assets\n        uint256 allocated; // Amount of capital allocated to this strategy\n        uint256 gains; // Total returns that Strategy has realized for Vault\n        uint256 losses; // Total losses that Strategy has realized for Vault\n        uint256 lastReport; // block.timestamp of the last time a report occured\n    }\n\n    function convertToAssets(uint256 shares) external view returns (uint256);\n\n    function strategies(address strategy) external view returns (StrategyParams memory);\n\n    /**\n     * @notice Called by a strategy to determine the amount of capital that the vault is\n     * able to provide it. A positive amount means that vault has excess capital to provide\n     * the strategy, while a negative amount means that the strategy has a balance owing to\n     * the vault.\n     */\n    function availableCapital() external view returns (int256);\n\n    /**\n     * This is the main contact point where the Strategy interacts with the\n     * Vault. It is critical that this call is handled as intended by the\n     * Strategy. Therefore, this function will be called by BaseStrategy to\n     * make sure the integration is correct.\n     */\n    function report(int256 roi, uint256 repayment) external returns (uint256);\n\n    /**\n     * This function should only be used in the scenario where the Strategy is\n     * being retired but no migration of the positions are possible, or in the\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\n     * mode in order for it to exit as quickly as possible. The latter scenario\n     * could be for any reason that is considered \"critical\" that the Strategy\n     * exits its position as fast as possible, such as a sudden change in\n     * market conditions leading to losses, or an imminent failure in an\n     * external dependency.\n     */\n    function revokeStrategy(address strategy) external;\n\n    function getPricePerFullShare() external view returns (uint256);\n}\n"
        },
        "./contracts/interfaces/IRouter.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IRouter {\n    function factory() external pure returns (address);\n\n    function bDeployer() external pure returns (address);\n\n    function cDeployer() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function mint(\n        address poolToken,\n        uint256 amount,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 tokens);\n\n    function mintETH(\n        address poolToken,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 tokens);\n\n    function mintCollateral(\n        address poolToken,\n        uint256 amount,\n        address to,\n        uint256 deadline,\n        bytes calldata permitData\n    ) external returns (uint256 tokens);\n\n    function redeem(\n        address poolToken,\n        uint256 tokens,\n        address to,\n        uint256 deadline,\n        bytes calldata permitData\n    ) external returns (uint256 amount);\n\n    function redeemETH(\n        address poolToken,\n        uint256 tokens,\n        address to,\n        uint256 deadline,\n        bytes calldata permitData\n    ) external returns (uint256 amountETH);\n\n    function borrow(\n        address borrowable,\n        uint256 amount,\n        address to,\n        uint256 deadline,\n        bytes calldata permitData\n    ) external;\n\n    function borrowETH(\n        address borrowable,\n        uint256 amountETH,\n        address to,\n        uint256 deadline,\n        bytes calldata permitData\n    ) external;\n\n    function repay(\n        address borrowable,\n        uint256 amountMax,\n        address borrower,\n        uint256 deadline\n    ) external returns (uint256 amount);\n\n    function repayETH(\n        address borrowable,\n        address borrower,\n        uint256 deadline\n    ) external payable returns (uint256 amountETH);\n\n    function liquidate(\n        address borrowable,\n        uint256 amountMax,\n        address borrower,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amount, uint256 seizeTokens);\n\n    function liquidateETH(\n        address borrowable,\n        address borrower,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountETH, uint256 seizeTokens);\n\n    function leverage(\n        address uniswapV2Pair,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bytes calldata permitDataA,\n        bytes calldata permitDataB\n    ) external;\n\n    function deleverage(\n        address uniswapV2Pair,\n        uint256 redeemTokens,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        uint256 deadline,\n        bytes calldata permitData\n    ) external;\n\n    function isVaultToken(address underlying) external view returns (bool);\n\n    function getUniswapV2Pair(address underlying) external view returns (address);\n\n    function getBorrowable(address uniswapV2Pair, uint8 index) external view returns (address borrowable);\n\n    function getCollateral(address uniswapV2Pair) external view returns (address collateral);\n\n    function getLendingPool(address uniswapV2Pair)\n        external\n        view\n        returns (\n            address collateral,\n            address borrowableA,\n            address borrowableB\n        );\n}\n"
        },
        "./contracts/interfaces/IFactory.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IFactory {\n    event LendingPoolInitialized(\n        address indexed uniswapV2Pair,\n        address indexed token0,\n        address indexed token1,\n        address collateral,\n        address borrowable0,\n        address borrowable1,\n        uint256 lendingPoolId\n    );\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n    event NewAdmin(address oldAdmin, address newAdmin);\n    event NewReservesPendingAdmin(address oldReservesPendingAdmin, address newReservesPendingAdmin);\n    event NewReservesAdmin(address oldReservesAdmin, address newReservesAdmin);\n    event NewReservesManager(address oldReservesManager, address newReservesManager);\n\n    function admin() external view returns (address);\n\n    function pendingAdmin() external view returns (address);\n\n    function reservesAdmin() external view returns (address);\n\n    function reservesPendingAdmin() external view returns (address);\n\n    function reservesManager() external view returns (address);\n\n    function getLendingPool(address uniswapV2Pair)\n        external\n        view\n        returns (\n            bool initialized,\n            uint24 lendingPoolId,\n            address collateral,\n            address borrowable0,\n            address borrowable1\n        );\n\n    function allLendingPools(uint256) external view returns (address uniswapV2Pair);\n\n    function allLendingPoolsLength() external view returns (uint256);\n\n    function bDeployer() external view returns (address);\n\n    function cDeployer() external view returns (address);\n\n    function tarotPriceOracle() external view returns (address);\n\n    function createCollateral(address uniswapV2Pair) external returns (address collateral);\n\n    function createBorrowable0(address uniswapV2Pair) external returns (address borrowable0);\n\n    function createBorrowable1(address uniswapV2Pair) external returns (address borrowable1);\n\n    function initializeLendingPool(address uniswapV2Pair) external;\n\n    function _setPendingAdmin(address newPendingAdmin) external;\n\n    function _acceptAdmin() external;\n\n    function _setReservesPendingAdmin(address newPendingAdmin) external;\n\n    function _acceptReservesAdmin() external;\n\n    function _setReservesManager(address newReservesManager) external;\n}\n"
        },
        "./contracts/interfaces/IPoolToken.sol": {
            "content": "pragma solidity >=0.5.0;\n\ninterface IPoolToken {\n    /*** Tarot ERC20 ***/\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /*** Pool Token ***/\n\n    event Mint(address indexed sender, address indexed minter, uint256 mintAmount, uint256 mintTokens);\n    event Redeem(address indexed sender, address indexed redeemer, uint256 redeemAmount, uint256 redeemTokens);\n    event Sync(uint256 totalBalance);\n\n    function underlying() external view returns (address);\n\n    function factory() external view returns (address);\n\n    function totalBalance() external view returns (uint256);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function exchangeRate() external returns (uint256);\n\n    function mint(address minter) external returns (uint256 mintTokens);\n\n    function redeem(address redeemer) external returns (uint256 redeemAmount);\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function _setFactory() external;\n}\n"
        },
        "./contracts/interfaces/ICollateral.sol": {
            "content": "pragma solidity >=0.5.0;\n\ninterface ICollateral {\n    /*** Tarot ERC20 ***/\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /*** Pool Token ***/\n\n    event Mint(address indexed sender, address indexed minter, uint256 mintAmount, uint256 mintTokens);\n    event Redeem(address indexed sender, address indexed redeemer, uint256 redeemAmount, uint256 redeemTokens);\n    event Sync(uint256 totalBalance);\n\n    function underlying() external view returns (address);\n\n    function factory() external view returns (address);\n\n    function totalBalance() external view returns (uint256);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function exchangeRate() external returns (uint256);\n\n    function mint(address minter) external returns (uint256 mintTokens);\n\n    function redeem(address redeemer) external returns (uint256 redeemAmount);\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function _setFactory() external;\n\n    /*** Collateral ***/\n\n    function borrowable0() external view returns (address);\n\n    function borrowable1() external view returns (address);\n\n    function tarotPriceOracle() external view returns (address);\n\n    function safetyMarginSqrt() external view returns (uint256);\n\n    function liquidationIncentive() external view returns (uint256);\n\n    function getPrices() external returns (uint256 price0, uint256 price1);\n\n    function tokensUnlocked(address from, uint256 value) external returns (bool);\n\n    function accountLiquidityAmounts(\n        address account,\n        uint256 amount0,\n        uint256 amount1\n    ) external returns (uint256 liquidity, uint256 shortfall);\n\n    function accountLiquidity(address account) external returns (uint256 liquidity, uint256 shortfall);\n\n    function canBorrow(\n        address account,\n        address borrowable,\n        uint256 accountBorrows\n    ) external returns (bool);\n\n    function seize(\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external returns (uint256 seizeTokens);\n\n    function flashRedeem(\n        address redeemer,\n        uint256 redeemAmount,\n        bytes calldata data\n    ) external;\n\n    /*** Collateral Setter ***/\n\n    event NewSafetyMargin(uint256 newSafetyMarginSqrt);\n    event NewLiquidationIncentive(uint256 newLiquidationIncentive);\n\n    function SAFETY_MARGIN_SQRT_MIN() external pure returns (uint256);\n\n    function SAFETY_MARGIN_SQRT_MAX() external pure returns (uint256);\n\n    function LIQUIDATION_INCENTIVE_MIN() external pure returns (uint256);\n\n    function LIQUIDATION_INCENTIVE_MAX() external pure returns (uint256);\n\n    function _initialize(\n        string calldata _name,\n        string calldata _symbol,\n        address _underlying,\n        address _borrowable0,\n        address _borrowable1\n    ) external;\n\n    function _setSafetyMarginSqrt(uint256 newSafetyMarginSqrt) external;\n\n    function _setLiquidationIncentive(uint256 newLiquidationIncentive) external;\n}\n"
        },
        "./contracts/interfaces/IBorrowable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IBorrowable {\n    /*** Tarot ERC20 ***/\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /*** Pool Token ***/\n\n    event Mint(address indexed sender, address indexed minter, uint256 mintAmount, uint256 mintTokens);\n    event Redeem(address indexed sender, address indexed redeemer, uint256 redeemAmount, uint256 redeemTokens);\n    event Sync(uint256 totalBalance);\n\n    function underlying() external view returns (address);\n\n    function factory() external view returns (address);\n\n    function totalBalance() external view returns (uint256);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function exchangeRate() external returns (uint256);\n\n    function mint(address minter) external returns (uint256 mintTokens);\n\n    function redeem(address redeemer) external returns (uint256 redeemAmount);\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function _setFactory() external;\n\n    /*** Borrowable ***/\n\n    event BorrowApproval(address indexed owner, address indexed spender, uint256 value);\n    event Borrow(\n        address indexed sender,\n        address indexed borrower,\n        address indexed receiver,\n        uint256 borrowAmount,\n        uint256 repayAmount,\n        uint256 accountBorrowsPrior,\n        uint256 accountBorrows,\n        uint256 totalBorrows\n    );\n    event Liquidate(\n        address indexed sender,\n        address indexed borrower,\n        address indexed liquidator,\n        uint256 seizeTokens,\n        uint256 repayAmount,\n        uint256 accountBorrowsPrior,\n        uint256 accountBorrows,\n        uint256 totalBorrows\n    );\n\n    function BORROW_FEE() external pure returns (uint256);\n\n    function collateral() external view returns (address);\n\n    function reserveFactor() external view returns (uint256);\n\n    function exchangeRateLast() external view returns (uint256);\n\n    function borrowIndex() external view returns (uint256);\n\n    function totalBorrows() external view returns (uint256);\n\n    function borrowAllowance(address owner, address spender) external view returns (uint256);\n\n    function borrowBalance(address borrower) external view returns (uint256);\n\n    function borrowTracker() external view returns (address);\n\n    function BORROW_PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function borrowApprove(address spender, uint256 value) external returns (bool);\n\n    function borrowPermit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function borrow(\n        address borrower,\n        address receiver,\n        uint256 borrowAmount,\n        bytes calldata data\n    ) external;\n\n    function liquidate(address borrower, address liquidator) external returns (uint256 seizeTokens);\n\n    function trackBorrow(address borrower) external;\n\n    /*** Borrowable Interest Rate Model ***/\n\n    event AccrueInterest(uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\n    event CalculateKink(uint256 kinkRate);\n    event CalculateBorrowRate(uint256 borrowRate);\n\n    function KINK_BORROW_RATE_MAX() external pure returns (uint256);\n\n    function KINK_BORROW_RATE_MIN() external pure returns (uint256);\n\n    function KINK_MULTIPLIER() external pure returns (uint256);\n\n    function borrowRate() external view returns (uint256);\n\n    function kinkBorrowRate() external view returns (uint256);\n\n    function kinkUtilizationRate() external view returns (uint256);\n\n    function adjustSpeed() external view returns (uint256);\n\n    function rateUpdateTimestamp() external view returns (uint32);\n\n    function accrualTimestamp() external view returns (uint32);\n\n    function accrueInterest() external;\n\n    /*** Borrowable Setter ***/\n\n    event NewReserveFactor(uint256 newReserveFactor);\n    event NewKinkUtilizationRate(uint256 newKinkUtilizationRate);\n    event NewAdjustSpeed(uint256 newAdjustSpeed);\n    event NewBorrowTracker(address newBorrowTracker);\n\n    function RESERVE_FACTOR_MAX() external pure returns (uint256);\n\n    function KINK_UR_MIN() external pure returns (uint256);\n\n    function KINK_UR_MAX() external pure returns (uint256);\n\n    function ADJUST_SPEED_MIN() external pure returns (uint256);\n\n    function ADJUST_SPEED_MAX() external pure returns (uint256);\n\n    function _initialize(\n        string calldata _name,\n        string calldata _symbol,\n        address _underlying,\n        address _collateral\n    ) external;\n\n    function _setReserveFactor(uint256 newReserveFactor) external;\n\n    function _setKinkUtilizationRate(uint256 newKinkUtilizationRate) external;\n\n    function _setAdjustSpeed(uint256 newAdjustSpeed) external;\n\n    function _setBorrowTracker(address newBorrowTracker) external;\n}\n"
        },
        "./contracts/interfaces/IUniswapV2Pair.sol": {
            "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n}\n"
        },
        "./contracts/library/UniswapV3Utils.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport '../interfaces/ISwapRouter.sol';\n// import \"@uniswap/v3-periphery/contracts/libraries/Path.sol\";\n\nlibrary UniswapV3Utils {\n    // using Path for bytes;\n\n    // Swap along an encoded path using known amountIn\n    function swap(\n        address _router,\n        bytes memory _path,\n        uint256 _amountIn\n    ) internal returns (uint256 amountOut) {\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\n            path: _path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: _amountIn,\n            amountOutMinimum: 0\n        });\n        return ISwapRouter(_router).exactInput(params);\n    }\n\n    // Swap along a token route using known fees and amountIn\n    function swap(\n        address _router,\n        address[] memory _route,\n        uint24[] memory _fee,\n        uint256 _amountIn\n    ) internal returns (uint256 amountOut) {\n        return swap(_router, routeToPath(_route, _fee), _amountIn);\n    }\n\n    // Convert encoded path to token route\n    // function pathToRoute(bytes memory _path) internal pure returns (address[] memory) {\n    //     uint256 numPools = _path.numPools();\n    //     address[] memory route = new address[](numPools + 1);\n    //     for (uint256 i; i < numPools; i++) {\n    //         (address tokenA, address tokenB,) = _path.decodeFirstPool();\n    //         route[i] = tokenA;\n    //         route[i + 1] = tokenB;\n    //         _path = _path.skipToken();\n    //     }\n    //     return route;\n    // }\n\n    // Convert token route to encoded path\n    // uint24 type for fees so path is packed tightly\n    function routeToPath(\n        address[] memory _route,\n        uint24[] memory _fee\n    ) internal pure returns (bytes memory path) {\n        path = abi.encodePacked(_route[0]);\n        uint256 feeLength = _fee.length;\n        for (uint256 i = 0; i < feeLength; i++) {\n            path = abi.encodePacked(path, _fee[i], _route[i+1]);\n        }\n    }\n}\n"
        },
        "./contracts/interfaces/ISwapRouter.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport './IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
        },
        "./contracts/interfaces/IUniswapV3SwapCallback.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}