{
    "language": "Solidity",
    "sources": {
        "./contracts/ReaperAutoCompoundFlashBorrow.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity ^0.8.0;\n\nimport \"./ReaperBaseStrategy.sol\";\nimport \"./interfaces/IAToken.sol\";\nimport \"./interfaces/IAaveProtocolDataProvider.sol\";\nimport \"./interfaces/IChefIncentivesController.sol\";\nimport \"./interfaces/IFlashLoanReceiver.sol\";\nimport \"./interfaces/ILendingPool.sol\";\nimport \"./interfaces/ILendingPoolAddressesProvider.sol\";\nimport \"./interfaces/IMultiFeeDistribution.sol\";\nimport \"./interfaces/IUniswapV2Router02.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\n\n/**\n * @dev Implementation of a strategy to get yields from depositing\n * the specified asset in a lending pool such as Geist.\n *\n * Flash loans are utilized during deposit() to achieve max leverage\n * without any loops, and during withdraw() to be able to repay first\n * without withdrawing anything.\n */\ncontract ReaperAutoCompoundFlashBorrow is ReaperBaseStrategy, IFlashLoanReceiver {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    // 3rd-party contract addresses\n    address public constant UNI_ROUTER = address(0xF491e7B69E4244ad4002BC14e878a34207E38c29);\n    address public constant GEIST_ADDRESSES_PROVIDER = address(0x6c793c628Fe2b480c5e6FB7957dDa4b9291F9c9b);\n    address public constant GEIST_DATA_PROVIDER = address(0xf3B0611e2E4D2cd6aB4bb3e01aDe211c3f42A8C3);\n    address public constant GEIST_INCENTIVES_CONTROLLER = address(0x297FddC5c33Ef988dd03bd13e162aE084ea1fE57);\n    address public constant GEIST_STAKING = address(0x49c93a95dbcc9A6A4D8f77E59c038ce5020e82f8);\n\n    // this strategy's configurable tokens\n    IAToken public gWant;\n    IERC20Upgradeable public want;\n\n    uint256 public targetLtv; // in hundredths of percent, 8000 = 80%\n    uint256 public maxDeleverageLoopIterations;\n    uint256 public withdrawSlippageTolerance; // basis points precision, 50 = 0.5%\n\n    /**\n     * 0 - no flash loan in progress\n     * 1 - deposit()-related flash loan in progress\n     * 2 - withdraw()-related flash loan in progress\n     */\n    uint256 private flashLoanStatus;\n    uint256 private constant NO_FL_IN_PROGRESS = 0;\n    uint256 private constant DEPOSIT_FL_IN_PROGRESS = 1;\n    uint256 private constant WITHDRAW_FL_IN_PROGRESS = 2;\n\n    // Misc constants\n    uint16 private constant LENDER_REFERRAL_CODE_NONE = 0;\n    uint256 private constant INTEREST_RATE_MODE_NONE = 0;\n    uint256 private constant INTEREST_RATE_MODE_VARIABLE = 2;\n    uint256 private constant DELEVER_SAFETY_ZONE = 9500;\n\n    /**\n     * @dev Tokens Used:\n     * {WFTM} - Required for liquidity routing when doing swaps.\n     * {GEIST} - Reward token for borrowing/lending that is used to rebalance and re-deposit.\n     * {rewardClaimingTokens} - Array containing gWant + corresponding variable debt token,\n     *                          used for vesting any oustanding unvested Geist tokens.\n     */\n    address public constant WFTM = address(0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83);\n    address public constant GEIST = address(0xd8321AA83Fb0a4ECd6348D4577431310A6E0814d);\n    address[] public rewardClaimingTokens;\n\n    /**\n     * @dev Paths used to swap tokens:\n     * {wftmToWantPath} - to swap {WFTM} to {want}\n     * {geistToWftmPath} - to swap {GEIST} to {WFTM}\n     */\n    address[] public wftmToWantPath;\n    address[] public geistToWftmPath;\n\n    /**\n     * @dev Initializes the strategy. Sets parameters, saves routes, and gives allowances.\n     * @notice see documentation for each variable above its respective declaration.\n     */\n    function initialize(\n        address _vault,\n        address[] memory _feeRemitters,\n        address[] memory _strategists,\n        IAToken _gWant,\n        uint256 _targetLtv\n    ) public initializer {\n        __ReaperBaseStrategy_init(_vault, _feeRemitters, _strategists);\n        maxDeleverageLoopIterations = 10;\n        withdrawSlippageTolerance = 50;\n        geistToWftmPath = [GEIST, WFTM];\n\n        gWant = _gWant;\n        want = IERC20Upgradeable(_gWant.UNDERLYING_ASSET_ADDRESS());\n\n        if (address(want) == WFTM) {\n            wftmToWantPath = [WFTM];\n        } else {\n            wftmToWantPath = [WFTM, address(want)];\n        }\n\n        (, , address vToken) = IAaveProtocolDataProvider(GEIST_DATA_PROVIDER).getReserveTokensAddresses(address(want));\n        rewardClaimingTokens = [address(_gWant), vToken];\n\n        safeUpdateTargetLtv(_targetLtv);\n        giveAllowances();\n    }\n\n    function ADDRESSES_PROVIDER() public pure override returns (ILendingPoolAddressesProvider) {\n        return ILendingPoolAddressesProvider(GEIST_ADDRESSES_PROVIDER);\n    }\n\n    function LENDING_POOL() public view override returns (ILendingPool) {\n        return ILendingPool(ADDRESSES_PROVIDER().getLendingPool());\n    }\n\n    function executeOperation(\n        address[] calldata,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata\n    ) external override returns (bool) {\n        require(initiator == address(this), \"!initiator\");\n        require(flashLoanStatus != NO_FL_IN_PROGRESS, \"invalid flashLoanStatus\");\n\n        ILendingPool lendingPool = LENDING_POOL();\n\n        if (flashLoanStatus == DEPOSIT_FL_IN_PROGRESS) {\n            flashLoanStatus = NO_FL_IN_PROGRESS;\n\n            // simply deposit everything we have\n            // lender will automatically open a variable debt position\n            // since flash loan was requested with interest rate mode VARIABLE\n            lendingPool.deposit(address(want), want.balanceOf(address(this)), address(this), LENDER_REFERRAL_CODE_NONE);\n        } else if (flashLoanStatus == WITHDRAW_FL_IN_PROGRESS) {\n            flashLoanStatus = NO_FL_IN_PROGRESS;\n\n            uint256 owedToVault = amounts[0];\n            uint256 owedToLender = amounts[0] + premiums[0];\n            uint256 netOwing = owedToVault + owedToLender;\n\n            uint256 allowance = amounts[0];\n            loopDelever(netOwing, allowance);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Function that puts the funds to work.\n     * It gets called whenever someone deposits in the strategy's vault contract.\n     */\n    function deposit() public override whenNotPaused {\n        // first repay portion of loan as necessary to return to targetLtv\n        // then lever up what's left\n        (uint256 supply, uint256 borrow) = getSupplyAndBorrow();\n        uint256 desirableBorrow = (targetLtv * supply) / PERCENT_DIVISOR;\n        if (borrow > desirableBorrow) {\n            LENDING_POOL().repay(\n                address(want),\n                MathUpgradeable.min(borrow - desirableBorrow, want.balanceOf(address(this))),\n                INTEREST_RATE_MODE_VARIABLE,\n                address(this)\n            );\n        }\n\n        // we want to figure out amount to flash loan (\"amount\") in terms\n        // of the starting deposit (\"wantBal\"). Equation to satisfy is:\n        // wantBal + amount = (PD / ltv) (amount) .. which solves to\n        // amount = [(wantBal)(ltv)]/[PD - ltv]\n        uint256 flAmount = (want.balanceOf(address(this)) * targetLtv) / (PERCENT_DIVISOR - targetLtv);\n        if (flAmount != 0) {\n            initFlashLoan(flAmount, INTEREST_RATE_MODE_VARIABLE, DEPOSIT_FL_IN_PROGRESS);\n        }\n    }\n\n    /**\n     * @dev Withdraws funds and sends them back to the vault.\n     */\n    function withdraw(uint256 _amount, bool _useFL) external override {\n        require(msg.sender == vault, \"!vault\");\n\n        uint256 wantBal = want.balanceOf(address(this));\n        uint256 withdrawFee;\n\n        if (_amount <= wantBal) {\n            withdrawFee = (_amount * securityFee) / PERCENT_DIVISOR;\n            want.safeTransfer(vault, _amount - withdrawFee);\n            return;\n        }\n\n        if (wantBal != 0) {\n            withdrawFee = (wantBal * securityFee) / PERCENT_DIVISOR;\n            want.safeTransfer(vault, wantBal - withdrawFee);\n        }\n\n        uint256 remaining = _amount - wantBal;\n        (uint256 supply, uint256 borrow) = getSupplyAndBorrow();\n        uint256 realSupply = supply - borrow;\n        require(remaining <= realSupply, \"invalid amount\");\n\n        if (_useFL) {\n            // in the withdraw case, user is reponsible for flash loan fee,\n            // which is akin to our typical withdraw \"security\" fee\n            // so the amount we flash loan + the premium on that amount\n            // should equal \"remaining\" (because that's what we owe the user less fees)\n            // which means that the equation to satisfy is ..\n            // remaining = amount + [(amount)(premium) / PD], which solves to\n            // amount = [(remaining)(PD)]/[PD + premium]\n            uint256 flAmount = (remaining * PERCENT_DIVISOR) /\n                (PERCENT_DIVISOR + LENDING_POOL().FLASHLOAN_PREMIUM_TOTAL());\n            initFlashLoan(flAmount, INTEREST_RATE_MODE_NONE, WITHDRAW_FL_IN_PROGRESS);\n            remaining = flAmount;\n        } else {\n            withdrawFee = (remaining * securityFee) / PERCENT_DIVISOR;\n            remaining -= withdrawFee;\n            deleverUsingExcessCollateral(remaining);\n        }\n\n        wantBal = want.balanceOf(address(this));\n        if (wantBal < remaining) {\n            require(\n                wantBal >= (remaining * (PERCENT_DIVISOR - withdrawSlippageTolerance)) / PERCENT_DIVISOR,\n                \"withdraw: outside slippage tolerance!\"\n            );\n        }\n\n        want.safeTransfer(vault, MathUpgradeable.min(wantBal, remaining));\n    }\n\n    /**\n     * @dev Returns the approx amount of profit from harvesting.\n     *      Profit is denominated in WFTM, and takes fees into account.\n     */\n    function estimateHarvest() external view override returns (uint256 profit, uint256 callFeeToUser) {\n        // Technically profit is made up of:\n        // 1. 50% of unvested geist (we claim immediately so 50% penalty applies)\n        // 2. Less any rebalancing needed\n        //\n        // However, the main purpose of this function is estimating callFeeToUser\n        // and we will charge fees before rebalancing. So in here we don't\n        // factor in the rebalancing.\n        uint256[] memory unvestedGeistRewards = IChefIncentivesController(GEIST_INCENTIVES_CONTROLLER).claimableReward(\n            address(this),\n            rewardClaimingTokens\n        );\n        uint256 unvestedGeist;\n\n        for (uint256 i; i < unvestedGeistRewards.length; i++) {\n            unvestedGeist += unvestedGeistRewards[i];\n        }\n\n        unvestedGeist /= 2;\n\n        profit = IUniswapV2Router02(UNI_ROUTER).getAmountsOut(unvestedGeist, geistToWftmPath)[1];\n\n        // take out fees from profit\n        uint256 wftmFee = (profit * totalFee) / PERCENT_DIVISOR;\n        callFeeToUser = (wftmFee * callFee) / PERCENT_DIVISOR;\n        profit -= wftmFee;\n    }\n\n    function deleverUsingExcessCollateral(uint256 _amount) internal {\n        (uint256 supply, uint256 borrow) = getSupplyAndBorrow();\n        uint256 realSupply = supply - borrow;\n\n        // calculate amount to reduce borrow by\n        uint256 newRealSupply = realSupply - _amount;\n        uint256 newBorrow = (newRealSupply * targetLtv) / (PERCENT_DIVISOR - targetLtv);\n        uint256 borrowReduction = borrow - newBorrow;\n\n        // we will withdraw excess collateral to reduce borrow by\n        // `borrowReduction`. This will allow us to safely withdraw\n        // any extra supply that is not needed to maintain `targetLtv`\n        // for `newBorrow`. In case withdrawing `borrowReduction` puts us over\n        // liquidation threshold ltv, we will borrow 95% of the excess\n        // collateral and use a loop to delever in steps.\n        (, , uint256 threshLtv, , , , , , , ) = IAaveProtocolDataProvider(GEIST_DATA_PROVIDER)\n            .getReserveConfigurationData(address(want));\n        uint256 threshSupply = (borrow * PERCENT_DIVISOR) / threshLtv;\n        uint256 allowance = ((supply - threshSupply) * DELEVER_SAFETY_ZONE) / PERCENT_DIVISOR;\n        allowance = MathUpgradeable.min(allowance, borrowReduction);\n\n        // withdraw and repay\n        ILendingPool lendingPool = LENDING_POOL();\n        allowance = lendingPool.withdraw(address(want), allowance, address(this));\n        lendingPool.repay(address(want), allowance, INTEREST_RATE_MODE_VARIABLE, address(this));\n\n        // what's the extra supply we can safely withdraw now?\n        (supply, borrow) = getSupplyAndBorrow();\n        allowance = supply - ((borrow * PERCENT_DIVISOR) / targetLtv);\n        allowance = lendingPool.withdraw(address(want), allowance, address(this));\n        (supply, borrow) = getSupplyAndBorrow();\n\n        // at this point, if `allowance` isn't enough to cover `_amount`,\n        // use a loop to delever\n        loopDelever(_amount, allowance);\n    }\n\n    function loopDelever(uint256 _amount, uint256 allowance) internal {\n        (uint256 supply, uint256 borrow) = getSupplyAndBorrow();\n        ILendingPool lendingPool = LENDING_POOL();\n\n        for (uint256 i; i < maxDeleverageLoopIterations && allowance < _amount; i++) {\n            uint256 repayment = MathUpgradeable.min(borrow, allowance);\n            if (repayment != 0) {\n                lendingPool.repay(address(want), repayment, INTEREST_RATE_MODE_VARIABLE, address(this));\n            }\n\n            uint256 withdrawal = MathUpgradeable.min(supply, (repayment * PERCENT_DIVISOR) / targetLtv);\n            if (withdrawal != 0) {\n                lendingPool.withdraw(address(want), withdrawal, address(this));\n            }\n\n            (supply, borrow) = getSupplyAndBorrow();\n            allowance = want.balanceOf(address(this));\n        }\n    }\n\n    /**\n     * @dev Core function of the strat, in charge of collecting and re-investing rewards.\n     */\n    function _harvestCore() internal override {\n        processGeistVestsAndSwapToFtm();\n        chargePerformanceFees();\n        convertWftmToWant();\n        deposit();\n    }\n\n    function processGeistVestsAndSwapToFtm() internal {\n        // vest unvested tokens\n        IChefIncentivesController(GEIST_INCENTIVES_CONTROLLER).claim(address(this), rewardClaimingTokens);\n\n        // withdraw immediately\n        IMultiFeeDistribution stakingContract = IMultiFeeDistribution(GEIST_STAKING);\n        // \"amount\" and \"penaltyAmount\" would always be the same since\n        // penalty is 50%. However, sometimes the returned value for\n        // \"amount\" might be 1 wei higher than \"penalty\" due to rounding\n        // which causes withdraw(amount) to fail. Hence we take the min.\n        (uint256 amount, uint256 penaltyAmount) = stakingContract.withdrawableBalance(address(this));\n        stakingContract.withdraw(MathUpgradeable.min(amount, penaltyAmount));\n\n        // swap to ftm\n        IUniswapV2Router02(UNI_ROUTER).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            IERC20Upgradeable(GEIST).balanceOf(address(this)),\n            0,\n            geistToWftmPath,\n            address(this),\n            block.timestamp + 600\n        );\n    }\n\n    /**\n     * @dev Takes out fees from the rewards.\n     * callFeeToUser is set as a percentage of the fee.\n     */\n    function chargePerformanceFees() internal {\n        uint256 wftmFee = (IERC20Upgradeable(WFTM).balanceOf(address(this)) * totalFee) / PERCENT_DIVISOR;\n\n        if (wftmFee != 0) {\n            uint256 callFeeToUser = (wftmFee * callFee) / PERCENT_DIVISOR;\n            uint256 treasuryFeeToVault = (wftmFee * treasuryFee) / PERCENT_DIVISOR;\n            uint256 feeToStrategist = (treasuryFeeToVault * strategistFee) / PERCENT_DIVISOR;\n            treasuryFeeToVault -= feeToStrategist;\n\n            IERC20Upgradeable(WFTM).safeTransfer(msg.sender, callFeeToUser);\n            IERC20Upgradeable(WFTM).safeTransfer(treasury, treasuryFeeToVault);\n            IERC20Upgradeable(WFTM).safeTransfer(strategistRemitter, feeToStrategist);\n        }\n    }\n\n    /**\n     * @dev Converts all of this contract's {WFTM} balance into {want}.\n     *      Typically called during harvesting to transform assets back into\n     *      {want} for re-depositing.\n     */\n    function convertWftmToWant() internal {\n        uint256 wftmBal = IERC20Upgradeable(WFTM).balanceOf(address(this));\n        if (wftmBal != 0 && wftmToWantPath.length > 1) {\n            IUniswapV2Router02(UNI_ROUTER).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                wftmBal,\n                0,\n                wftmToWantPath,\n                address(this),\n                block.timestamp + 600\n            );\n        }\n    }\n\n    function initFlashLoan(\n        uint256 _amount,\n        uint256 _rateMode,\n        uint256 _newLoanStatus\n    ) internal {\n        // asset to be flashed\n        address[] memory assets = new address[](1);\n        assets[0] = address(want);\n\n        // amount to be flashed\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = _amount;\n\n        // 0 = no debt, 1 = stable, 2 = variable\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = _rateMode;\n\n        flashLoanStatus = _newLoanStatus;\n        LENDING_POOL().flashLoan(address(this), assets, amounts, modes, address(this), \"\", LENDER_REFERRAL_CODE_NONE);\n    }\n\n    function getSupplyAndBorrow() public view returns (uint256 supply, uint256 borrow) {\n        (supply, , borrow, , , , , , ) = IAaveProtocolDataProvider(GEIST_DATA_PROVIDER).getUserReserveData(\n            address(want),\n            address(this)\n        );\n        return (supply, borrow);\n    }\n\n    function authorizedDelever(\n        uint256 _amount,\n        uint256 _tempLtv,\n        bool _useFL\n    ) external {\n        _onlyStrategistOrOwner();\n        uint256 actualTargetLtv = targetLtv;\n        safeUpdateTargetLtv(_tempLtv);\n        if (_useFL) {\n            initFlashLoan(_amount, INTEREST_RATE_MODE_NONE, WITHDRAW_FL_IN_PROGRESS);\n        } else {\n            deleverUsingExcessCollateral(_amount);\n        }\n        targetLtv = actualTargetLtv;\n    }\n\n    /**\n     * @dev Function to calculate the total {want} held by the strat.\n     * It takes into account both the funds in hand, plus the funds in the lendingPool.\n     */\n    function balanceOf() public view override returns (uint256) {\n        (uint256 supply, uint256 borrow) = getSupplyAndBorrow();\n        uint256 realSupply = supply - borrow;\n        return realSupply + want.balanceOf(address(this));\n    }\n\n    /**\n     * @dev Function to retire the strategy. Claims all rewards and withdraws\n     *      all principal from external contracts, and sends everything back to\n     *      the vault. Can only be called by strategist or owner.\n     *\n     * Note: this is not an emergency withdraw function. For that, see panic().\n     */\n    function retireStrat(bool _useFL) external override {\n        _onlyStrategistOrOwner();\n\n        processGeistVestsAndSwapToFtm();\n        convertWftmToWant();\n        _withdrawAll(_useFL);\n\n        want.safeTransfer(vault, want.balanceOf(address(this)));\n    }\n\n    /**\n     * @dev Pauses deposits. Withdraws all funds leaving rewards behind\n     */\n    function panic(bool _useFL) external override {\n        _onlyStrategistOrOwner();\n        _withdrawAll(_useFL);\n        pause();\n    }\n\n    function _withdrawAll(bool _useFL) internal {\n        (uint256 supply, uint256 borrow) = getSupplyAndBorrow();\n        uint256 realSupply = supply - borrow;\n\n        if (_useFL) {\n            // amount = [(realSupply)(PD)]/[PD + premium]\n            uint256 flAmount = (realSupply * PERCENT_DIVISOR) /\n                (PERCENT_DIVISOR + LENDING_POOL().FLASHLOAN_PREMIUM_TOTAL());\n            initFlashLoan(flAmount, INTEREST_RATE_MODE_NONE, WITHDRAW_FL_IN_PROGRESS);\n        } else {\n            deleverUsingExcessCollateral(realSupply);\n        }\n    }\n\n    /**\n     * @dev Pauses the strat.\n     */\n    function pause() public override {\n        _onlyStrategistOrOwner();\n        _pause();\n        removeAllowances();\n    }\n\n    /**\n     * @dev Unpauses the strat.\n     */\n    function unpause() external override {\n        _onlyStrategistOrOwner();\n        _unpause();\n\n        giveAllowances();\n\n        deposit();\n    }\n\n    /**\n     * @dev Updates target LTV (safely), maximum iterations for the\n     *      deleveraging loop, slippage tolerance (when withdrawing),\n     *      Can only be called by strategist or owner.\n     */\n    function setLeverageParams(\n        uint256 _newTargetLtv,\n        uint256 _newmaxDeleverageLoopIterations,\n        uint256 _newWithdrawSlippageTolerance\n    ) external {\n        _onlyStrategistOrOwner();\n        safeUpdateTargetLtv(_newTargetLtv);\n        maxDeleverageLoopIterations = _newmaxDeleverageLoopIterations;\n\n        require(_newWithdrawSlippageTolerance <= PERCENT_DIVISOR, \"invalid slippage!\");\n        withdrawSlippageTolerance = _newWithdrawSlippageTolerance;\n    }\n\n    function safeUpdateTargetLtv(uint256 _newTargetLtv) internal {\n        (, uint256 ltv, , , , , , , , ) = IAaveProtocolDataProvider(GEIST_DATA_PROVIDER).getReserveConfigurationData(\n            address(want)\n        );\n        require(_newTargetLtv <= ltv, \"targetLtv not safe\");\n        targetLtv = _newTargetLtv;\n    }\n\n    function giveAllowances() internal {\n        address lendingPoolAddress = ADDRESSES_PROVIDER().getLendingPool();\n        IERC20Upgradeable(want).safeApprove(lendingPoolAddress, 0);\n        IERC20Upgradeable(want).safeApprove(lendingPoolAddress, type(uint256).max);\n        IERC20Upgradeable(GEIST).safeApprove(UNI_ROUTER, 0);\n        IERC20Upgradeable(GEIST).safeApprove(UNI_ROUTER, type(uint256).max);\n        IERC20Upgradeable(WFTM).safeApprove(UNI_ROUTER, 0);\n        IERC20Upgradeable(WFTM).safeApprove(UNI_ROUTER, type(uint256).max);\n    }\n\n    function removeAllowances() internal {\n        address lendingPoolAddress = ADDRESSES_PROVIDER().getLendingPool();\n        IERC20Upgradeable(want).safeApprove(lendingPoolAddress, 0);\n        IERC20Upgradeable(GEIST).safeApprove(UNI_ROUTER, 0);\n        IERC20Upgradeable(WFTM).safeApprove(UNI_ROUTER, 0);\n    }\n}\n"
        },
        "./contracts/ReaperBaseStrategy.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IStrategy.sol\";\nimport \"./interfaces/IVault.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\nabstract contract ReaperBaseStrategy is\n    IStrategy,\n    UUPSUpgradeable,\n    AccessControlEnumerableUpgradeable,\n    PausableUpgradeable\n{\n    uint256 public constant PERCENT_DIVISOR = 10_000;\n    uint256 public constant ONE_YEAR = 365 days;\n    uint256 public constant UPGRADE_TIMELOCK = 1 hours; // minimum 48 hours for RF\n\n    struct Harvest {\n        uint256 timestamp;\n        uint256 vaultSharePrice;\n    }\n\n    Harvest[] public harvestLog;\n    uint256 public harvestLogCadence;\n    uint256 public lastHarvestTimestamp;\n\n    enum UpgradeStatus {\n        Inactive,\n        Initiated,\n        RollbackTest,\n        Complete\n    }\n    uint256 public upgradeProposalTime;\n    UpgradeStatus public upgradeStatus;\n\n    /**\n     * Reaper Roles\n     */\n    bytes32 public constant STRATEGIST = keccak256(\"STRATEGIST\");\n    bytes32 public constant STRATEGIST_MULTISIG = keccak256(\"STRATEGIST_MULTISIG\");\n\n    /**\n     * @dev Reaper contracts:\n     * {treasury} - Address of the Reaper treasury\n     * {vault} - Address of the vault that controls the strategy's funds.\n     * {strategistRemitter} - Address where strategist fee is remitted to.\n     */\n    address public treasury;\n    address public vault;\n    address public strategistRemitter;\n\n    /**\n     * Fee related constants:\n     * {MAX_FEE} - Maximum fee allowed by the strategy. Hard-capped at 10%.\n     * {STRATEGIST_MAX_FEE} - Maximum strategist fee allowed by the strategy (as % of treasury fee).\n     *                        Hard-capped at 50%\n     * {MAX_SECURITY_FEE} - Maximum security fee charged on withdrawal to prevent\n     *                      flash deposit/harvest attacks.\n     */\n    uint256 public constant MAX_FEE = 1000;\n    uint256 public constant STRATEGIST_MAX_FEE = 5000;\n    uint256 public constant MAX_SECURITY_FEE = 10;\n\n    /**\n     * @dev Distribution of fees earned, expressed as % of the profit from each harvest.\n     * {totalFee} - divided by 10,000 to determine the % fee. Set to 4.5% by default and\n     * lowered as necessary to provide users with the most competitive APY.\n     *\n     * {callFee} - Percent of the totalFee reserved for the harvester (1000 = 10% of total fee: 0.45% by default)\n     * {treasuryFee} - Percent of the totalFee taken by maintainers of the software (9000 = 90% of total fee: 4.05% by default)\n     * {strategistFee} - Percent of the treasuryFee taken by strategist (2500 = 25% of treasury fee: 1.0125% by default)\n     *\n     * {securityFee} - Fee taxed when a user withdraws funds. Taken to prevent flash deposit/harvest attacks.\n     * These funds are redistributed to stakers in the pool.\n     */\n    uint256 public totalFee;\n    uint256 public callFee;\n    uint256 public treasuryFee;\n    uint256 public strategistFee;\n    uint256 public securityFee;\n\n    /**\n     * {TotalFeeUpdated} Event that is fired each time the total fee is updated.\n     * {FeesUpdated} Event that is fired each time callFee+treasuryFee+strategistFee are updated.\n     * {StratHarvest} Event that is fired each time the strategy gets harvested.\n     * {StrategistRemitterUpdated} Event that is fired each time the strategistRemitter address is updated.\n     */\n    event TotalFeeUpdated(uint256 newFee);\n    event FeesUpdated(uint256 newCallFee, uint256 newTreasuryFee, uint256 newStrategistFee);\n    event StratHarvest(address indexed harvester);\n    event StrategistRemitterUpdated(address newStrategistRemitter);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function __ReaperBaseStrategy_init(\n        address _vault,\n        address[] memory _feeRemitters,\n        address[] memory _strategists\n    ) internal onlyInitializing {\n        __UUPSUpgradeable_init();\n        __AccessControlEnumerable_init();\n        __Pausable_init_unchained();\n\n        harvestLogCadence = 1 hours;\n        totalFee = 450;\n        callFee = 1000;\n        treasuryFee = 9000;\n        strategistFee = 2500;\n        securityFee = 10;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        upgradeStatus = UpgradeStatus.Inactive;\n        clearUpgradeCooldown();\n\n        vault = _vault;\n        treasury = _feeRemitters[0];\n        strategistRemitter = _feeRemitters[1];\n\n        for (uint256 i = 0; i < _strategists.length; i++) {\n            _grantRole(STRATEGIST, _strategists[i]);\n        }\n\n        harvestLog.push(Harvest({timestamp: block.timestamp, vaultSharePrice: IVault(_vault).getPricePerFullShare()}));\n    }\n\n    /**\n     * @dev harvest() function that takes care of logging. Subcontracts should\n     *      override _harvestCore() and implement their specific logic in it.\n     */\n    function harvest() external override whenNotPaused {\n        _harvestCore();\n\n        if (block.timestamp >= harvestLog[harvestLog.length - 1].timestamp + harvestLogCadence) {\n            harvestLog.push(\n                Harvest({timestamp: block.timestamp, vaultSharePrice: IVault(vault).getPricePerFullShare()})\n            );\n        }\n\n        lastHarvestTimestamp = block.timestamp;\n        emit StratHarvest(msg.sender);\n    }\n\n    function harvestLogLength() external view returns (uint256) {\n        return harvestLog.length;\n    }\n\n    /**\n     * @dev Returns a slice of the harvest log containing the _n latest harvests.\n     */\n    function latestHarvestLogSlice(uint256 _n) external view returns (Harvest[] memory slice) {\n        slice = new Harvest[](_n);\n        uint256 sliceCounter = 0;\n\n        for (uint256 i = harvestLog.length - _n; i < harvestLog.length; i++) {\n            slice[sliceCounter++] = harvestLog[i];\n        }\n    }\n\n    /**\n     * @dev Traverses the harvest log backwards until it hits _timestamp,\n     *      and returns the average APR calculated across all the included\n     *      log entries. APR is multiplied by PERCENT_DIVISOR to retain precision.\n     */\n    function averageAPRSince(uint256 _timestamp) external view returns (int256) {\n        require(harvestLog.length >= 2, \"need at least 2 log entries\");\n\n        int256 runningAPRSum;\n        int256 numLogsProcessed;\n\n        for (uint256 i = harvestLog.length - 1; i > 0 && harvestLog[i].timestamp >= _timestamp; i--) {\n            runningAPRSum += calculateAPRUsingLogs(i - 1, i);\n            numLogsProcessed++;\n        }\n\n        return runningAPRSum / numLogsProcessed;\n    }\n\n    /**\n     * @dev Traverses the harvest log backwards _n items,\n     *      and returns the average APR calculated across all the included\n     *      log entries. APR is multiplied by PERCENT_DIVISOR to retain precision.\n     */\n    function averageAPRAcrossLastNHarvests(int256 _n) external view returns (int256) {\n        require(harvestLog.length >= 2, \"need at least 2 log entries\");\n\n        int256 runningAPRSum;\n        int256 numLogsProcessed;\n\n        for (uint256 i = harvestLog.length - 1; i > 0 && numLogsProcessed < _n; i--) {\n            runningAPRSum += calculateAPRUsingLogs(i - 1, i);\n            numLogsProcessed++;\n        }\n\n        return runningAPRSum / numLogsProcessed;\n    }\n\n    /**\n     * @dev Only strategist or owner can edit the log cadence.\n     */\n    function updateHarvestLogCadence(uint256 _newCadenceInSeconds) external {\n        _onlyStrategistOrOwner();\n        harvestLogCadence = _newCadenceInSeconds;\n    }\n\n    /**\n     * @dev updates the total fee, capped at 5%; only owner.\n     */\n    function updateTotalFee(uint256 _totalFee) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(_totalFee <= MAX_FEE, \"Fee Too High\");\n        totalFee = _totalFee;\n        emit TotalFeeUpdated(totalFee);\n    }\n\n    /**\n     * @dev updates the call fee, treasury fee, and strategist fee\n     *      call Fee + treasury Fee must add up to PERCENT_DIVISOR\n     *\n     *      strategist fee is expressed as % of the treasury fee and\n     *      must be no more than STRATEGIST_MAX_FEE\n     *\n     *      only owner\n     */\n    function updateFees(\n        uint256 _callFee,\n        uint256 _treasuryFee,\n        uint256 _strategistFee\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (bool) {\n        require(_callFee + _treasuryFee == PERCENT_DIVISOR, \"sum != PERCENT_DIVISOR\");\n        require(_strategistFee <= STRATEGIST_MAX_FEE, \"strategist fee > STRATEGIST_MAX_FEE\");\n\n        callFee = _callFee;\n        treasuryFee = _treasuryFee;\n        strategistFee = _strategistFee;\n        emit FeesUpdated(callFee, treasuryFee, strategistFee);\n        return true;\n    }\n\n    function updateSecurityFee(uint256 _securityFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(_securityFee <= MAX_SECURITY_FEE, \"fee to high!\");\n        securityFee = _securityFee;\n    }\n\n    /**\n     * @dev only owner can update treasury address.\n     */\n    function updateTreasury(address newTreasury) external onlyRole(DEFAULT_ADMIN_ROLE) returns (bool) {\n        treasury = newTreasury;\n        return true;\n    }\n\n    /**\n     * @dev Updates the current strategistRemitter.\n     *      If there is only one strategist this function may be called by\n     *      that strategist. However if there are multiple strategists\n     *      this function may only be called by the STRATEGIST_MULTISIG role.\n     */\n    function updateStrategistRemitter(address _newStrategistRemitter) external {\n        if (getRoleMemberCount(STRATEGIST) == 1) {\n            _checkRole(STRATEGIST, msg.sender);\n        } else {\n            _checkRole(STRATEGIST_MULTISIG, msg.sender);\n        }\n\n        require(_newStrategistRemitter != address(0), \"!0\");\n        strategistRemitter = _newStrategistRemitter;\n        emit StrategistRemitterUpdated(_newStrategistRemitter);\n    }\n\n    /**\n     * @dev Only allow access to strategist or owner\n     */\n    function _onlyStrategistOrOwner() internal view {\n        require(hasRole(STRATEGIST, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Not authorized\");\n    }\n\n    function calculateAPRUsingLogs(uint256 _startIndex, uint256 _endIndex) public view returns (int256) {\n        Harvest storage start = harvestLog[_startIndex];\n        Harvest storage end = harvestLog[_endIndex];\n        bool increasing = true;\n        if (end.vaultSharePrice < start.vaultSharePrice) {\n            increasing = false;\n        }\n\n        uint256 unsignedSharePriceChange;\n        if (increasing) {\n            unsignedSharePriceChange = end.vaultSharePrice - start.vaultSharePrice;\n        } else {\n            unsignedSharePriceChange = start.vaultSharePrice - end.vaultSharePrice;\n        }\n\n        uint256 unsignedPercentageChange = (unsignedSharePriceChange * 1e18) / start.vaultSharePrice;\n        uint256 timeDifference = end.timestamp - start.timestamp;\n\n        uint256 yearlyUnsignedPercentageChange = (unsignedPercentageChange * ONE_YEAR) / timeDifference;\n        yearlyUnsignedPercentageChange /= 1e14; // restore basis points precision\n\n        if (increasing) {\n            return int256(yearlyUnsignedPercentageChange);\n        }\n\n        return -int256(yearlyUnsignedPercentageChange);\n    }\n\n    /**\n     * @dev DEFAULT_ADMIN_ROLE must call this function prior to upgrading the implementation\n     *      and wait UPGRADE_TIMELOCK seconds before executing the upgrade.\n     */\n    function initiateUpgradeCooldown() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        upgradeProposalTime = block.timestamp;\n        upgradeStatus = UpgradeStatus.Initiated;\n    }\n\n    /**\n     * @dev This function is called:\n     *      - in initialize()\n     *      - as part of a successful upgrade\n     *      - manually by DEFAULT_ADMIN_ROLE to clear the upgrade cooldown.\n     */\n    function clearUpgradeCooldown() public onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (upgradeStatus != UpgradeStatus.RollbackTest) {\n            upgradeProposalTime = block.timestamp + (ONE_YEAR * 100);\n            upgradeStatus = UpgradeStatus.Inactive;\n        }\n    }\n\n    /**\n     * @dev This function must be overriden simply for access control purposes.\n     *      Only DEFAULT_ADMIN_ROLE can upgrade the implementation once the timelock\n     *      has passed.\n     */\n    function _authorizeUpgrade(address) internal override onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(\n            upgradeStatus == UpgradeStatus.Initiated || upgradeStatus == UpgradeStatus.RollbackTest,\n            \"invalid upgrade status\"\n        );\n        require(upgradeProposalTime + UPGRADE_TIMELOCK < block.timestamp, \"cooldown still active\");\n        upgradeStatus = UpgradeStatus(uint256(upgradeStatus) + 1);\n        clearUpgradeCooldown();\n    }\n\n    /**\n     * @dev Returns the approx amount of profit from harvesting plus fee that\n     *      would be returned to harvest caller.\n     */\n    function estimateHarvest() external view virtual returns (uint256 profit, uint256 callFeeToUser);\n\n    function balanceOf() public view virtual override returns (uint256);\n\n    /**\n     * @dev subclasses should add their custom harvesting logic in this function\n     *      including charging any fees.\n     */\n    function _harvestCore() internal virtual;\n}\n"
        },
        "./contracts/interfaces/IStrategy.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity ^0.8.0;\n\ninterface IStrategy {\n    //deposits all funds into the farm\n    function deposit() external;\n\n    //vault only - withdraws funds from the strategy\n    function withdraw(uint256 _amount, bool _useFL) external;\n\n    //returns the balance of all tokens managed by the strategy\n    function balanceOf() external view returns (uint256);\n\n    //claims farmed tokens, distributes fees, and sells tokens to re-add to the LP & farm\n    function harvest() external;\n\n    //withdraws all tokens and sends them back to the vault\n    function retireStrat(bool _useFL) external;\n\n    //pauses deposits, resets allowances, and withdraws all funds from farm\n    function panic(bool _useFL) external;\n\n    //pauses deposits and resets allowances\n    function pause() external;\n\n    //unpauses deposits and maxes out allowances again\n    function unpause() external;\n\n    //updates Total Fee\n    function updateTotalFee(uint256 _totalFee) external;\n}\n"
        },
        "./contracts/interfaces/IVault.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity ^0.8.0;\n\ninterface IVault {\n    function getPricePerFullShare() external view returns (uint256);\n}\n"
        },
        "./contracts/interfaces/IAToken.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IInitializableAToken.sol\";\nimport \"./IScaledBalanceToken.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IAToken is IERC20Upgradeable, IScaledBalanceToken, IInitializableAToken {\n    /**\n     * @dev Emitted after the mint action\n     * @param from The address performing the mint\n     * @param value The amount being\n     * @param index The new liquidity index of the reserve\n     **/\n    event Mint(address indexed from, uint256 value, uint256 index);\n\n    /**\n     * @dev Mints `amount` aTokens to `user`\n     * @param user The address receiving the minted tokens\n     * @param amount The amount of tokens getting minted\n     * @param index The new liquidity index of the reserve\n     * @return `true` if the the previous balance of the user was 0\n     */\n    function mint(\n        address user,\n        uint256 amount,\n        uint256 index\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted after aTokens are burned\n     * @param from The owner of the aTokens, getting them burned\n     * @param target The address that will receive the underlying\n     * @param value The amount being burned\n     * @param index The new liquidity index of the reserve\n     **/\n    event Burn(\n        address indexed from,\n        address indexed target,\n        uint256 value,\n        uint256 index\n    );\n\n    /**\n     * @dev Emitted during the transfer action\n     * @param from The user whose tokens are being transferred\n     * @param to The recipient\n     * @param value The amount being transferred\n     * @param index The new liquidity index of the reserve\n     **/\n    event BalanceTransfer(\n        address indexed from,\n        address indexed to,\n        uint256 value,\n        uint256 index\n    );\n\n    /**\n     * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n     * @param user The owner of the aTokens, getting them burned\n     * @param receiverOfUnderlying The address that will receive the underlying\n     * @param amount The amount being burned\n     * @param index The new liquidity index of the reserve\n     **/\n    function burn(\n        address user,\n        address receiverOfUnderlying,\n        uint256 amount,\n        uint256 index\n    ) external;\n\n    /**\n     * @dev Mints aTokens to the reserve treasury\n     * @param amount The amount of tokens getting minted\n     * @param index The new liquidity index of the reserve\n     */\n    function mintToTreasury(uint256 amount, uint256 index) external;\n\n    /**\n     * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\n     * @param from The address getting liquidated, current owner of the aTokens\n     * @param to The recipient\n     * @param value The amount of tokens getting transferred\n     **/\n    function transferOnLiquidation(\n        address from,\n        address to,\n        uint256 value\n    ) external;\n\n    /**\n     * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\n     * assets in borrow(), withdraw() and flashLoan()\n     * @param user The recipient of the underlying\n     * @param amount The amount getting transferred\n     * @return The amount transferred\n     **/\n    function transferUnderlyingTo(address user, uint256 amount)\n        external\n        returns (uint256);\n\n    /**\n     * @dev Invoked to execute actions on the aToken side after a repayment.\n     * @param user The user executing the repayment\n     * @param amount The amount getting repaid\n     **/\n    function handleRepayment(address user, uint256 amount) external;\n\n    /**\n     * @dev Returns the address of the incentives controller contract\n     **/\n    function getIncentivesController()\n        external\n        view\n        returns (IAaveIncentivesController);\n\n    /**\n     * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\n     **/\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}\n"
        },
        "./contracts/interfaces/IInitializableAToken.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAaveIncentivesController.sol\";\nimport \"./ILendingPool.sol\";\n\n/**\n * @title IInitializableAToken\n * @notice Interface for the initialize function on AToken\n * @author Aave\n **/\ninterface IInitializableAToken {\n    /**\n     * @dev Emitted when an aToken is initialized\n     * @param underlyingAsset The address of the underlying asset\n     * @param pool The address of the associated lending pool\n     * @param treasury The address of the treasury\n     * @param incentivesController The address of the incentives controller for this aToken\n     * @param aTokenDecimals the decimals of the underlying\n     * @param aTokenName the name of the aToken\n     * @param aTokenSymbol the symbol of the aToken\n     * @param params A set of encoded parameters for additional initialization\n     **/\n    event Initialized(\n        address indexed underlyingAsset,\n        address indexed pool,\n        address treasury,\n        address incentivesController,\n        uint8 aTokenDecimals,\n        string aTokenName,\n        string aTokenSymbol,\n        bytes params\n    );\n\n    /**\n     * @dev Initializes the aToken\n     * @param pool The address of the lending pool where this aToken will be used\n     * @param treasury The address of the Aave treasury, receiving the fees on this aToken\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\n     * @param incentivesController The smart contract managing potential incentives distribution\n     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\n     * @param aTokenName The name of the aToken\n     * @param aTokenSymbol The symbol of the aToken\n     */\n    function initialize(\n        ILendingPool pool,\n        address treasury,\n        address underlyingAsset,\n        IAaveIncentivesController incentivesController,\n        uint8 aTokenDecimals,\n        string calldata aTokenName,\n        string calldata aTokenSymbol,\n        bytes calldata params\n    ) external;\n}\n"
        },
        "./contracts/interfaces/IAaveIncentivesController.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IAaveIncentivesController {\n    event RewardsAccrued(address indexed user, uint256 amount);\n\n    event RewardsClaimed(\n        address indexed user,\n        address indexed to,\n        uint256 amount\n    );\n\n    event RewardsClaimed(\n        address indexed user,\n        address indexed to,\n        address indexed claimer,\n        uint256 amount\n    );\n\n    event ClaimerSet(address indexed user, address indexed claimer);\n\n    /*\n     * @dev Returns the configuration of the distribution for a certain asset\n     * @param asset The address of the reference asset of the distribution\n     * @return The asset index, the emission per second and the last updated timestamp\n     **/\n    function getAssetData(address asset)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /**\n     * @dev Whitelists an address to claim the rewards on behalf of another address\n     * @param user The address of the user\n     * @param claimer The address of the claimer\n     */\n    function setClaimer(address user, address claimer) external;\n\n    /**\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n     * @param user The address of the user\n     * @return The claimer address\n     */\n    function getClaimer(address user) external view returns (address);\n\n    /**\n     * @dev Configure assets for a certain rewards emission\n     * @param assets The assets to incentivize\n     * @param emissionsPerSecond The emission for each asset\n     */\n    function configureAssets(\n        address[] calldata assets,\n        uint256[] calldata emissionsPerSecond\n    ) external;\n\n    /**\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\n     * @param user The address of the user\n     * @param userBalance The balance of the user of the asset in the lending pool\n     * @param totalSupply The total supply of the asset in the lending pool\n     **/\n    function handleAction(\n        address user,\n        uint256 userBalance,\n        uint256 totalSupply\n    ) external;\n\n    /**\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n     * @param user The address of the user\n     * @return The rewards\n     **/\n    function getRewardsBalance(address[] calldata assets, address user)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n     * @param amount Amount of rewards to claim\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     **/\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\n     * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n     * @param amount Amount of rewards to claim\n     * @param user Address to check and claim rewards\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     **/\n    function claimRewardsOnBehalf(\n        address[] calldata assets,\n        uint256 amount,\n        address user,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev returns the unclaimed rewards of the user\n     * @param user the address of the user\n     * @return the unclaimed user rewards\n     */\n    function getUserUnclaimedRewards(address user)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev returns the unclaimed rewards of the user\n     * @param user the address of the user\n     * @param asset The asset to incentivize\n     * @return the user index for the asset\n     */\n    function getUserAssetData(address user, address asset)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev for backward compatibility with previous implementation of the Incentives controller\n     */\n    function REWARD_TOKEN() external view returns (address);\n\n    /**\n     * @dev for backward compatibility with previous implementation of the Incentives controller\n     */\n    function PRECISION() external view returns (uint8);\n\n    /**\n     * @dev Gets the distribution end timestamp of the emissions\n     */\n    function DISTRIBUTION_END() external view returns (uint256);\n}\n"
        },
        "./contracts/interfaces/ILendingPool.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity ^0.8.0;\n\nimport \"./ILendingPoolAddressesProvider.sol\";\n\nlibrary DataTypes {\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        //tokens addresses\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint8 id;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: Reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60-63: reserved\n        //bit 64-79: reserve factor\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        uint256 data;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n}\n\ninterface ILendingPool {\n    /**\n     * @dev Emitted on deposit()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the deposit\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n     * @param amount The amount deposited\n     * @param referral The referral code used\n     **/\n    event Deposit(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlyng asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to Address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     **/\n    event Withdraw(\n        address indexed reserve,\n        address indexed user,\n        address indexed to,\n        uint256 amount\n    );\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed\n     * @param referral The referral code used\n     **/\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint256 borrowRateMode,\n        uint256 borrowRate,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     **/\n    event Repay(\n        address indexed reserve,\n        address indexed user,\n        address indexed repayer,\n        uint256 amount\n    );\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralEnabled(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralDisabled(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     **/\n    event RebalanceStableBorrowRate(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     **/\n    event FlashLoan(\n        address indexed target,\n        address indexed initiator,\n        address indexed asset,\n        uint256 amount,\n        uint256 premium,\n        uint16 referralCode\n    );\n\n    /**\n     * @dev Emitted when the pause is triggered.\n     */\n    event Paused();\n\n    /**\n     * @dev Emitted when the pause is lifted.\n     */\n    event Unpaused();\n\n    /**\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n     * LendingPoolCollateral manager using a DELEGATECALL\n     * This allows to have the events in the generated ABI for LendingPool.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n     * gets added to the LendingPool ABI\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The new liquidity rate\n     * @param stableBorrowRate The new stable borrow rate\n     * @param variableBorrowRate The new variable borrow rate\n     * @param liquidityIndex The new liquidity index\n     * @param variableBorrowIndex The new variable borrow index\n     **/\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint256);\n\n    function LENDINGPOOL_REVISION() external view returns (uint256);\n\n    function MAX_NUMBER_RESERVES() external view returns (uint256);\n\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to deposit\n     * @param amount The amount to be deposited\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to Address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     **/\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     **/\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 rateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n     * @param asset The address of the underlying asset borrowed\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n    /**\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n     *        borrowed at a stable rate and depositors are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     **/\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n     * @param asset The address of the underlying asset deposited\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n     **/\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\n        external;\n\n    /**\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n     * For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts amounts being flash-borrowed\n     * @param modes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralETH the total collateral in ETH of the user\n     * @return totalDebtETH the total debt in ETH of the user\n     * @return availableBorrowsETH the borrowing power left of the user\n     * @return currentLiquidationThreshold the liquidation threshold of the user\n     * @return ltv the loan to value of the user\n     * @return healthFactor the current health factor of the user\n     **/\n    function getUserAccountData(address user)\n        external\n        view\n        returns (\n            uint256 totalCollateralETH,\n            uint256 totalDebtETH,\n            uint256 availableBorrowsETH,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    function initReserve(\n        address reserve,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    function setReserveInterestRateStrategyAddress(\n        address reserve,\n        address rateStrategyAddress\n    ) external;\n\n    function setConfiguration(address reserve, uint256 configuration) external;\n\n    /**\n     * @dev Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     **/\n    function getConfiguration(address asset)\n        external\n        view\n        returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n     * @dev Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     **/\n    function getUserConfiguration(address user)\n        external\n        view\n        returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n     * @dev Returns the normalized income normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(address asset)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Returns the normalized variable debt per unit of asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(address asset)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state of the reserve\n     **/\n    function getReserveData(address asset)\n        external\n        view\n        returns (DataTypes.ReserveData memory);\n\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromAfter,\n        uint256 balanceToBefore\n    ) external;\n\n    function getReservesList() external view returns (address[] memory);\n\n    function getAddressesProvider()\n        external\n        view\n        returns (ILendingPoolAddressesProvider);\n\n    function setPause(bool val) external;\n\n    function paused() external view returns (bool);\n}\n"
        },
        "./contracts/interfaces/ILendingPoolAddressesProvider.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity ^0.8.0;\n\n/**\n * @title LendingPoolAddressesProvider contract\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n * - Owned by the Aave Governance\n * @author Aave\n **/\ninterface ILendingPoolAddressesProvider {\n    event MarketIdSet(string newMarketId);\n    event LendingPoolUpdated(address indexed newAddress);\n    event ConfigurationAdminUpdated(address indexed newAddress);\n    event EmergencyAdminUpdated(address indexed newAddress);\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n    event PriceOracleUpdated(address indexed newAddress);\n    event LendingRateOracleUpdated(address indexed newAddress);\n    event ProxyCreated(bytes32 id, address indexed newAddress);\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n    function getMarketId() external view returns (string memory);\n\n    function setMarketId(string calldata marketId) external;\n\n    function setAddress(bytes32 id, address newAddress) external;\n\n    function setAddressAsProxy(bytes32 id, address impl) external;\n\n    function getAddress(bytes32 id) external view returns (address);\n\n    function getLendingPool() external view returns (address);\n\n    function setLendingPoolImpl(address pool) external;\n\n    function getLendingPoolConfigurator() external view returns (address);\n\n    function setLendingPoolConfiguratorImpl(address configurator) external;\n\n    function getLendingPoolCollateralManager() external view returns (address);\n\n    function setLendingPoolCollateralManager(address manager) external;\n\n    function getPoolAdmin() external view returns (address);\n\n    function setPoolAdmin(address admin) external;\n\n    function getEmergencyAdmin() external view returns (address);\n\n    function setEmergencyAdmin(address admin) external;\n\n    function getPriceOracle() external view returns (address);\n\n    function setPriceOracle(address priceOracle) external;\n\n    function getLendingRateOracle() external view returns (address);\n\n    function setLendingRateOracle(address lendingRateOracle) external;\n}\n"
        },
        "./contracts/interfaces/IScaledBalanceToken.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IScaledBalanceToken {\n    /**\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\n     * @param user The user whose balance is calculated\n     * @return The scaled balance of the user\n     **/\n    function scaledBalanceOf(address user) external view returns (uint256);\n\n    /**\n     * @dev Returns the scaled balance of the user and the scaled total supply.\n     * @param user The address of the user\n     * @return The scaled balance of the user\n     * @return The scaled balance and the scaled total supply\n     **/\n    function getScaledUserBalanceAndSupply(address user)\n        external\n        view\n        returns (uint256, uint256);\n\n    /**\n     * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\n     * @return The scaled total supply\n     **/\n    function scaledTotalSupply() external view returns (uint256);\n}\n"
        },
        "./contracts/interfaces/IAaveProtocolDataProvider.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity ^0.8.0;\n\ninterface IAaveProtocolDataProvider {\n    struct TokenData {\n        string symbol;\n        address tokenAddress;\n    }\n\n    function ADDRESSES_PROVIDER() external view returns (address);\n\n    function getAllATokens() external view returns (TokenData[] memory);\n\n    function getAllReservesTokens() external view returns (TokenData[] memory);\n\n    function getReserveConfigurationData(address asset)\n        external\n        view\n        returns (\n            uint256 decimals,\n            uint256 ltv,\n            uint256 liquidationThreshold,\n            uint256 liquidationBonus,\n            uint256 reserveFactor,\n            bool usageAsCollateralEnabled,\n            bool borrowingEnabled,\n            bool stableBorrowRateEnabled,\n            bool isActive,\n            bool isFrozen\n        );\n\n    function getReserveData(address asset)\n        external\n        view\n        returns (\n            uint256 availableLiquidity,\n            uint256 totalStableDebt,\n            uint256 totalVariableDebt,\n            uint256 liquidityRate,\n            uint256 variableBorrowRate,\n            uint256 stableBorrowRate,\n            uint256 averageStableBorrowRate,\n            uint256 liquidityIndex,\n            uint256 variableBorrowIndex,\n            uint40 lastUpdateTimestamp\n        );\n\n    function getReserveTokensAddresses(address asset)\n        external\n        view\n        returns (\n            address aTokenAddress,\n            address stableDebtTokenAddress,\n            address variableDebtTokenAddress\n        );\n\n    function getUserReserveData(address asset, address user)\n        external\n        view\n        returns (\n            uint256 currentATokenBalance,\n            uint256 currentStableDebt,\n            uint256 currentVariableDebt,\n            uint256 principalStableDebt,\n            uint256 scaledVariableDebt,\n            uint256 stableBorrowRate,\n            uint256 liquidityRate,\n            uint40 stableRateLastUpdated,\n            bool usageAsCollateralEnabled\n        );\n}\n"
        },
        "./contracts/interfaces/IChefIncentivesController.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity ^0.8.0;\n\nimport \"./IMultiFeeDistribution.sol\";\n\ninterface IOnwardIncentivesController {\n    function handleAction(\n        address _token,\n        address _user,\n        uint256 _balance,\n        uint256 _totalSupply\n    ) external;\n}\n\ninterface IChefIncentivesController {\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n\n    // Info about token emissions for a given time period.\n    struct EmissionPoint {\n        uint128 startTimeOffset;\n        uint128 rewardsPerSecond;\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        uint256 totalSupply;\n        uint256 allocPoint; // How many allocation points assigned to this pool.\n        uint256 lastRewardTime; // Last second that reward distribution occurs.\n        uint256 accRewardPerShare; // Accumulated rewards per share, times 1e12. See below.\n        IOnwardIncentivesController onwardIncentives;\n    }\n\n    function addPool(address _token, uint256 _allocPoint) external;\n\n    function batchUpdateAllocPoint(\n        address[] calldata _tokens,\n        uint256[] calldata _allocPoints\n    ) external;\n\n    function claim(address _user, address[] calldata _tokens) external;\n\n    function claimReceiver(address) external view returns (address);\n\n    function claimableReward(address _user, address[] calldata _tokens)\n        external\n        view\n        returns (uint256[] memory);\n\n    function emissionSchedule(uint256)\n        external\n        view\n        returns (EmissionPoint memory);\n\n    function handleAction(\n        address _user,\n        uint256 _balance,\n        uint256 _totalSupply\n    ) external;\n\n    function maxMintableTokens() external view returns (uint256);\n\n    function mintedTokens() external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function poolConfigurator() external view returns (address);\n\n    function poolInfo(address) external view returns (PoolInfo memory);\n\n    function poolLength() external view returns (uint256);\n\n    function registeredTokens(uint256) external view returns (address);\n\n    function renounceOwnership() external;\n\n    function rewardMinter() external view returns (IMultiFeeDistribution);\n\n    function rewardsPerSecond() external view returns (uint256);\n\n    function setClaimReceiver(address _user, address _receiver) external;\n\n    function setOnwardIncentives(\n        address _token,\n        IOnwardIncentivesController _incentives\n    ) external;\n\n    function start() external;\n\n    function startTime() external view returns (uint256);\n\n    function totalAllocPoint() external view returns (uint256);\n\n    function transferOwnership(address newOwner) external;\n\n    function userInfo(address, address) external view returns (UserInfo memory);\n}\n"
        },
        "./contracts/interfaces/IMultiFeeDistribution.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IMultiFeeDistribution {\n    /* ========== STATE VARIABLES ========== */\n\n    struct Reward {\n        uint256 periodFinish;\n        uint256 rewardRate;\n        uint256 lastUpdateTime;\n        uint256 rewardPerTokenStored;\n        // tracks already-added balances to handle accrued interest in aToken rewards\n        // for the stakingToken this value is unused and will always be 0\n        uint256 balance;\n    }\n    struct Balances {\n        uint256 total;\n        uint256 unlocked;\n        uint256 locked;\n        uint256 earned;\n    }\n    struct LockedBalance {\n        uint256 amount;\n        uint256 unlockTime;\n    }\n    struct RewardData {\n        address token;\n        uint256 amount;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function lastTimeRewardApplicable(address _rewardsToken)\n        external\n        view\n        returns (uint256);\n\n    function rewardPerToken(address _rewardsToken)\n        external\n        view\n        returns (uint256);\n\n    function getRewardForDuration(address _rewardsToken)\n        external\n        view\n        returns (uint256);\n\n    // Address and claimable amount of all reward tokens for the given account\n    function claimableRewards(address account)\n        external\n        view\n        returns (RewardData[] memory rewards);\n\n    // Total balance of an account, including unlocked, locked and earned tokens\n    function totalBalance(address user) external view returns (uint256 amount);\n\n    // Total withdrawable balance for an account to which no penalty is applied\n    function unlockedBalance(address user)\n        external\n        view\n        returns (uint256 amount);\n\n    // Information on the \"earned\" balances of a user\n    // Earned balances may be withdrawn immediately for a 50% penalty\n    function earnedBalances(address user)\n        external\n        view\n        returns (uint256 total, LockedBalance[] memory earningsData);\n\n    // Information on a user's locked balances\n    function lockedBalances(address user)\n        external\n        view\n        returns (\n            uint256 total,\n            uint256 unlockable,\n            uint256 locked,\n            LockedBalance[] memory lockData\n        );\n\n    // Final balance received and penalty balance paid by user upon calling exit\n    function withdrawableBalance(address user)\n        external\n        view\n        returns (uint256 amount, uint256 penaltyAmount);\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    // Stake tokens to receive rewards\n    // Locked tokens cannot be withdrawn for lockDuration and are eligible to receive stakingReward rewards\n    function stake(uint256 amount, bool lock) external;\n\n    // Mint new tokens\n    // Minted tokens receive rewards normally but incur a 50% penalty when\n    // withdrawn before lockDuration has passed.\n    function mint(\n        address user,\n        uint256 amount,\n        bool withPenalty\n    ) external;\n\n    // Withdraw staked tokens\n    // First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens\n    // incurs a 50% penalty which is distributed based on locked balances.\n    function withdraw(uint256 amount) external;\n\n    // Claim all pending staking rewards\n    function getReward() external;\n\n    // Withdraw full unlocked balance and claim pending rewards\n    function exit() external;\n\n    // Withdraw all currently locked tokens where the unlock time has passed\n    function withdrawExpiredLocks() external;\n}\n"
        },
        "./contracts/interfaces/IFlashLoanReceiver.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ILendingPool.sol\";\nimport \"./ILendingPoolAddressesProvider.sol\";\n\n/**\n * @title IFlashLoanReceiver interface\n * @notice Interface for the Aave fee IFlashLoanReceiver.\n * @author Aave\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\n **/\ninterface IFlashLoanReceiver {\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n\n    function ADDRESSES_PROVIDER()\n        external\n        view\n        returns (ILendingPoolAddressesProvider);\n\n    function LENDING_POOL() external view returns (ILendingPool);\n}\n"
        },
        "./contracts/interfaces/IUniswapV2Router02.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.2;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
        },
        "./contracts/interfaces/IUniswapV2Router01.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n    uint256[49] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}